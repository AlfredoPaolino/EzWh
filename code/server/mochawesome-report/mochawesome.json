{
  "stats": {
    "suites": 25,
    "tests": 119,
    "passes": 119,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-15T20:08:28.967Z",
    "end": "2022-06-15T20:08:39.379Z",
    "duration": 10412,
    "testsRegistered": 119,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f25f6db3-5f78-43b2-9713-83f11bcc9167",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
          "title": "Test SKUItem APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKUItemRoute.js",
          "file": "/test/SKUItemRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test SKUItem APIs\"",
              "fullTitle": "Test SKUItem APIs \"before all\" hook in \"Test SKUItem APIs\"",
              "timedOut": false,
              "duration": 136,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));",
              "err": {},
              "uuid": "2383c47e-f85c-48d9-a50a-f0a1cdbd57aa",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKUItem",
              "fullTitle": "Test SKUItem APIs Adding a new SKUItem",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    \"RFID\" : RFID,\n    \"SKUId\" : SKUId,\n    \"DateOfStock\" : DateOfStock\n};\nagent.post('/api/skuitem').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "86f3ee13-37d8-46fa-affb-42560563baeb",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new SKUItem",
              "fullTitle": "Test SKUItem APIs Adding a new SKUItem",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    \"RFID\" : RFID,\n    \"SKUId\" : SKUId,\n    \"DateOfStock\" : DateOfStock\n};\nagent.post('/api/skuitem').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "7c134ec8-a460-410c-bb41-2e97679c6c03",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku items",
              "fullTitle": "Test SKUItem APIs Getting sku items",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/skuitems').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "d2107da6-8a1d-4a8a-9bae-2cde70be9122",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Test SKUItem APIs Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "28039065-e903-4595-a675-53c353f1450a",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "058a868b-b4d9-4f80-9088-a3fdd181487c",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "5b7021eb-1876-4ab3-b7ce-69bdbc751285",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "4e0e5665-aab3-4488-9efa-bd65615aff87",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete sku",
              "fullTitle": "Test SKUItem APIs Delete sku",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/skuitems/${rfid}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/skuitems/${rfid}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "6a667d09-2d10-42d0-99c9-b999a75bedf9",
              "parentUUID": "b6492b02-9cd5-43eb-b2b3-7f3ba3d6ad1d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86f3ee13-37d8-46fa-affb-42560563baeb",
            "7c134ec8-a460-410c-bb41-2e97679c6c03",
            "d2107da6-8a1d-4a8a-9bae-2cde70be9122",
            "28039065-e903-4595-a675-53c353f1450a",
            "058a868b-b4d9-4f80-9088-a3fdd181487c",
            "5b7021eb-1876-4ab3-b7ce-69bdbc751285",
            "4e0e5665-aab3-4488-9efa-bd65615aff87",
            "6a667d09-2d10-42d0-99c9-b999a75bedf9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d212c852-7d46-4d25-a14d-248398c54939",
          "title": "Test SKU APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test SKU APIs\"",
              "fullTitle": "Test SKU APIs \"before each\" hook in \"Test SKU APIs\"",
              "timedOut": false,
              "duration": 162,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 1, 1, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "c0411817-4f76-4e00-9fea-a6742d3d148f",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKU",
              "fullTitle": "Test SKU APIs Adding a new SKU",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "b085277e-5448-4ae9-9822-122aaf149529",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new SKU",
              "fullTitle": "Test SKU APIs Adding a new SKU",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "8cb66235-c529-494a-a2ed-ef4f3787aca9",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting skus",
              "fullTitle": "Test SKU APIs Getting skus",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/skus').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "92083dbf-5cf6-4862-9664-ea9219855b0d",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Test SKU APIs Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "1e0adfd9-68c3-4d03-b044-92cd4b535012",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "32f37ef7-a2b7-432d-8b8a-f955d4bae906",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "acd4d49d-ca93-43c0-bb0c-280e845fdec8",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "75a252e4-6005-415f-8c80-da5acd798d31",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put SKU position",
              "fullTitle": "Test SKU APIs Put SKU position",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}/position`).send({\n    position : position\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "b38ff760-945c-4467-9b41-98c1b7ea2c87",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete sku",
              "fullTitle": "Test SKU APIs Delete sku",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/skus/${id}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/sku/${id}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "48013282-dab0-46ad-ba95-da22b732c788",
              "parentUUID": "d212c852-7d46-4d25-a14d-248398c54939",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b085277e-5448-4ae9-9822-122aaf149529",
            "8cb66235-c529-494a-a2ed-ef4f3787aca9",
            "92083dbf-5cf6-4862-9664-ea9219855b0d",
            "1e0adfd9-68c3-4d03-b044-92cd4b535012",
            "32f37ef7-a2b7-432d-8b8a-f955d4bae906",
            "acd4d49d-ca93-43c0-bb0c-280e845fdec8",
            "75a252e4-6005-415f-8c80-da5acd798d31",
            "b38ff760-945c-4467-9b41-98c1b7ea2c87",
            "48013282-dab0-46ad-ba95-da22b732c788"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 137,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "897cf87c-c49d-4b8e-885c-6d8826344eec",
          "title": "Testing UC 1.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.1\"",
              "fullTitle": "Testing UC 1.1 \"before all\" hook in \"Testing UC 1.1\"",
              "timedOut": false,
              "duration": 149,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');",
              "err": {},
              "uuid": "57249ffc-0887-492e-a1b3-023871643b44",
              "parentUUID": "897cf87c-c49d-4b8e-885c-6d8826344eec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKU",
              "fullTitle": "Testing UC 1.1 Adding a new SKU",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "2784cdcc-1756-4a7e-b523-b719f6a6e542",
              "parentUUID": "897cf87c-c49d-4b8e-885c-6d8826344eec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2784cdcc-1756-4a7e-b523-b719f6a6e542"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "cb5189a8-8a1f-4a5a-84ea-7d694b6e4e35",
          "title": "Testing UC 1.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.2\"",
              "fullTitle": "Testing UC 1.2 \"before all\" hook in \"Testing UC 1.2\"",
              "timedOut": false,
              "duration": 143,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 1, 1, 10, \"first SKU\", null, null, 50));\nawait localDAO.addPosition(\"800234543413\", \"8002\", \"3454\", \"3413\", 1000, 1000);",
              "err": {},
              "uuid": "657c5738-c065-4f18-b1e2-2269993d510c",
              "parentUUID": "cb5189a8-8a1f-4a5a-84ea-7d694b6e4e35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put SKU position",
              "fullTitle": "Testing UC 1.2 Put SKU position",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}/position`).send({\n    position : position\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "29de8cd1-c9dd-45bb-baf8-2fddc26d92f5",
              "parentUUID": "cb5189a8-8a1f-4a5a-84ea-7d694b6e4e35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Testing UC 1.2 Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "689734d1-f795-4ab0-91d7-70245637fc2b",
              "parentUUID": "cb5189a8-8a1f-4a5a-84ea-7d694b6e4e35",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29de8cd1-c9dd-45bb-baf8-2fddc26d92f5",
            "689734d1-f795-4ab0-91d7-70245637fc2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "32153cdb-d77e-4842-acd8-1541796accd2",
          "title": "Testing UC 1.3",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.3\"",
              "fullTitle": "Testing UC 1.3 \"before all\" hook in \"Testing UC 1.3\"",
              "timedOut": false,
              "duration": 137,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));",
              "err": {},
              "uuid": "f9d585b9-12da-4ce4-9bef-d8206f4f8081",
              "parentUUID": "32153cdb-d77e-4842-acd8-1541796accd2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC 1.3 Put inside sku",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "c74f74eb-dc0e-41c7-97d0-af44a8e324ba",
              "parentUUID": "32153cdb-d77e-4842-acd8-1541796accd2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Testing UC 1.3 Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "78e18c67-465c-4045-9ab7-69008760feed",
              "parentUUID": "32153cdb-d77e-4842-acd8-1541796accd2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c74f74eb-dc0e-41c7-97d0-af44a8e324ba",
            "78e18c67-465c-4045-9ab7-69008760feed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d3eaa8a5-b0d2-40e4-b91b-62c3799fe1c1",
          "title": "Test InternalOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test InternalOrder APIs\"",
              "fullTitle": "Test InternalOrder APIs \"before all\" hook in \"Test InternalOrder APIs\"",
              "timedOut": false,
              "duration": 149,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));",
              "err": {},
              "uuid": "e5f41a74-2f46-4d7a-8e31-8f5693a78d4b",
              "parentUUID": "d3eaa8a5-b0d2-40e4-b91b-62c3799fe1c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new internal order",
              "fullTitle": "Test InternalOrder APIs Adding a new internal order",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    customerId : customerId\n};\nagent.post('/api/internalOrders').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "750faaca-0c33-4cf3-9a51-9bd443b3d9d8",
              "parentUUID": "d3eaa8a5-b0d2-40e4-b91b-62c3799fe1c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all internal orders",
              "fullTitle": "Test InternalOrder APIs Getting all internal orders",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/internalOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "27cc3b37-eee1-487e-8a94-74e975b45f49",
              "parentUUID": "d3eaa8a5-b0d2-40e4-b91b-62c3799fe1c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all internal orders issued",
              "fullTitle": "Test InternalOrder APIs Getting all internal orders issued",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/internalOrdersIssued').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "1ad92549-a901-4c59-8042-654aa176b6bd",
              "parentUUID": "d3eaa8a5-b0d2-40e4-b91b-62c3799fe1c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Test InternalOrder APIs Changing internal order state",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "e5181f17-2522-4c7b-8c4d-d40135a2992b",
              "parentUUID": "d3eaa8a5-b0d2-40e4-b91b-62c3799fe1c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Test InternalOrder APIs Changing internal order state",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "f1b445ba-d0dd-433b-b19f-618b57fb393c",
              "parentUUID": "d3eaa8a5-b0d2-40e4-b91b-62c3799fe1c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting an internal order",
              "fullTitle": "Test InternalOrder APIs Deleting an internal order",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/internalOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    });\n})",
              "err": {},
              "uuid": "d16414aa-5eca-4f15-9dfb-1d42346bc494",
              "parentUUID": "d3eaa8a5-b0d2-40e4-b91b-62c3799fe1c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "750faaca-0c33-4cf3-9a51-9bd443b3d9d8",
            "27cc3b37-eee1-487e-8a94-74e975b45f49",
            "1ad92549-a901-4c59-8042-654aa176b6bd",
            "e5181f17-2522-4c7b-8c4d-d40135a2992b",
            "f1b445ba-d0dd-433b-b19f-618b57fb393c",
            "d16414aa-5eca-4f15-9dfb-1d42346bc494"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 53,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d46ee00f-fff6-4f02-a0e1-090e99b99f28",
          "title": "Testing UC9",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC9\"",
              "fullTitle": "Testing UC9 \"before all\" hook in \"Testing UC9\"",
              "timedOut": false,
              "duration": 149,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));",
              "err": {},
              "uuid": "864cf470-9e57-4f51-a32f-77c4200ab934",
              "parentUUID": "d46ee00f-fff6-4f02-a0e1-090e99b99f28",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new internal order",
              "fullTitle": "Testing UC9 Adding a new internal order",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    customerId : customerId\n};\nagent.post('/api/internalOrders').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "c4c48abe-2f8c-4432-bdaa-66458fd9e98f",
              "parentUUID": "d46ee00f-fff6-4f02-a0e1-090e99b99f28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Testing UC9 Changing internal order state",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "828a5110-1e3e-435b-b180-04fc4dfdd039",
              "parentUUID": "d46ee00f-fff6-4f02-a0e1-090e99b99f28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4c48abe-2f8c-4432-bdaa-66458fd9e98f",
            "828a5110-1e3e-435b-b180-04fc4dfdd039"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a3463352-207d-42b0-bcee-19df29d5c24c",
          "title": "Testing UC10",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC10\"",
              "fullTitle": "Testing UC10 \"before all\" hook in \"Testing UC10\"",
              "timedOut": false,
              "duration": 174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addInternalOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"description\":\"a product\",\"price\":10.99,\"qty\":3}], 1);\nawait localDAO.editInternalOrder(1, \"ACCEPTED\");",
              "err": {},
              "uuid": "b5652ea6-9950-492e-8d12-f732d5381ad7",
              "parentUUID": "a3463352-207d-42b0-bcee-19df29d5c24c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Changing internal order state",
              "fullTitle": "Testing UC10 Changing internal order state",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "1ea49eae-8b4a-4f77-86e0-945dd107eccb",
              "parentUUID": "a3463352-207d-42b0-bcee-19df29d5c24c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku availability",
              "fullTitle": "Testing UC10 Getting sku availability",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    res.body.Available.should.equal(expectedAvailable);\n    done();\n});",
              "err": {},
              "uuid": "b63072c5-192e-4fe8-8047-d3e2baebeedc",
              "parentUUID": "a3463352-207d-42b0-bcee-19df29d5c24c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ea49eae-8b4a-4f77-86e0-945dd107eccb",
            "b63072c5-192e-4fe8-8047-d3e2baebeedc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8bdd81ad-eee7-4f4b-976a-a8891fcec306",
          "title": "Test item APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/itemRoute.js",
          "file": "/test/itemRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test item APIs\"",
              "fullTitle": "Test item APIs \"before each\" hook in \"Test item APIs\"",
              "timedOut": false,
              "duration": 161,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(new SKU('sku 1', 10, 10, 100, null, null, 1, 20));\nawait dao.insertSKU(new SKU('sku 2', 10, 10, 100, null, null, 2, 20));\nawait dao.addUser(\n\tnew User(\n\t\t'Simone',\n\t\t'Zanella',\n\t\t'supplier',\n\t\t's295316@studenti.polito.it',\n\t\t'TestPassword'\n\t)\n);\nawait dao.addItem(new Item('a new item', 10.99, 2, 1, 1));\nawait dao.addItem(new Item('another item', 12.99, 1, 2, 2));",
              "err": {},
              "uuid": "9cacf23c-d98d-4461-b288-61ab037abc42",
              "parentUUID": "8bdd81ad-eee7-4f4b-976a-a8891fcec306",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "add item : POST /api/item",
              "fullTitle": "Test item APIs add item : POST /api/item",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n\tid: id,\n\tdescription: description,\n\tprice: price,\n\tsupplierId: supplierId,\n\tSKUId: SKUId,\n};\nagent\n\t.post('/api/item')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "b98a6ddf-7216-4a57-9bd4-18d51dc40dfb",
              "parentUUID": "8bdd81ad-eee7-4f4b-976a-a8891fcec306",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get items : GET /api/items",
              "fullTitle": "Test item APIs get items : GET /api/items",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/items')\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "d4fde07c-5a07-411e-8f81-c42ab32d08f1",
              "parentUUID": "8bdd81ad-eee7-4f4b-976a-a8891fcec306",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getItembyId : GET /api/items/:id",
              "fullTitle": "Test item APIs getItembyId : GET /api/items/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/items/${id}/${supplierId}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "c3cd778d-4000-49a2-811e-f2d2c529f51a",
              "parentUUID": "8bdd81ad-eee7-4f4b-976a-a8891fcec306",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getItembyId : GET /api/items/:id",
              "fullTitle": "Test item APIs getItembyId : GET /api/items/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/items/${id}/${supplierId}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "d305d15d-26f2-45dd-b662-c76ed51788e1",
              "parentUUID": "8bdd81ad-eee7-4f4b-976a-a8891fcec306",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "editItem : PUT /api/item/:id",
              "fullTitle": "Test item APIs editItem : PUT /api/item/:id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/item/${id}/${supplierId}`)\n\t.send({\n\t\tnewDescription: newDescription,\n\t\tnewPrice: newPrice,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "f5f7574f-6deb-4811-8c36-e7647ff42e9d",
              "parentUUID": "8bdd81ad-eee7-4f4b-976a-a8891fcec306",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteItemById : DELETE /api/items/:id",
              "fullTitle": "Test item APIs deleteItemById : DELETE /api/items/:id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/items/${id}/${supplierId}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "fea5f12f-4822-4881-9287-9a7233eb30d6",
              "parentUUID": "8bdd81ad-eee7-4f4b-976a-a8891fcec306",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b98a6ddf-7216-4a57-9bd4-18d51dc40dfb",
            "d4fde07c-5a07-411e-8f81-c42ab32d08f1",
            "c3cd778d-4000-49a2-811e-f2d2c529f51a",
            "d305d15d-26f2-45dd-b662-c76ed51788e1",
            "f5f7574f-6deb-4811-8c36-e7647ff42e9d",
            "fea5f12f-4822-4881-9287-9a7233eb30d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
          "title": "Test Position APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test Position APIs\"",
              "fullTitle": "Test Position APIs \"before all\" hook in \"Test Position APIs\"",
              "timedOut": false,
              "duration": 144,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resetDB('./EZWarehouseDB.db');",
              "err": {},
              "uuid": "b2ae1c6e-e8ad-4229-8422-102a6e98b572",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new position",
              "fullTitle": "Test Position APIs Adding a new position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const position = {\n    \"positionID\" : positionID,\n    \"aisleID\" : aisleID,\n    \"row\" : row,\n    \"col\" : col,\n    \"maxWeight\" : maxWeight,\n    \"maxVolume\" : maxVolume\n};\nagent.post('/api/position').send(position).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "b0f328f8-8c5e-4544-997b-1c8e6c4e0d38",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new position",
              "fullTitle": "Test Position APIs Adding a new position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const position = {\n    \"positionID\" : positionID,\n    \"aisleID\" : aisleID,\n    \"row\" : row,\n    \"col\" : col,\n    \"maxWeight\" : maxWeight,\n    \"maxVolume\" : maxVolume\n};\nagent.post('/api/position').send(position).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "7adedef6-f048-4fdc-b0af-de023fd78ce5",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting positions",
              "fullTitle": "Test Position APIs Getting positions",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/positions').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "ed0aaf7b-4220-4518-9442-16837fcc7b75",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "e62cdbfc-9269-42a7-85ae-a217701e0195",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "2969a527-6fd8-4f16-9e88-6a6da2846990",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "0db4bd6d-e398-45d5-93a7-4bb29288b067",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "10cd83d5-508e-4516-88fe-ed4b2c7a5aa7",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "615e299c-0c26-401f-bf93-8226c18dd7a2",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "0b49e915-f9e1-4d29-a33c-9bff84f016e8",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete position by positionID",
              "fullTitle": "Test Position APIs Delete position by positionID",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/position/${posID}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/position/${posID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "bf1dbff1-07bb-4633-89d6-5e0b302f1061",
              "parentUUID": "272877c5-bf54-4d66-b620-9c2e34bb0cee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0f328f8-8c5e-4544-997b-1c8e6c4e0d38",
            "7adedef6-f048-4fdc-b0af-de023fd78ce5",
            "ed0aaf7b-4220-4518-9442-16837fcc7b75",
            "e62cdbfc-9269-42a7-85ae-a217701e0195",
            "2969a527-6fd8-4f16-9e88-6a6da2846990",
            "0db4bd6d-e398-45d5-93a7-4bb29288b067",
            "10cd83d5-508e-4516-88fe-ed4b2c7a5aa7",
            "615e299c-0c26-401f-bf93-8226c18dd7a2",
            "0b49e915-f9e1-4d29-a33c-9bff84f016e8",
            "bf1dbff1-07bb-4633-89d6-5e0b302f1061"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2c5d179e-abbd-4d1c-a411-7ec0600a451d",
          "title": "Testing UC 2.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.2\"",
              "fullTitle": "Testing UC 2.2 \"before all\" hook in \"Testing UC 2.2\"",
              "timedOut": false,
              "duration": 144,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "e593a85e-2b22-4d76-b1e7-26583abc90ab",
              "parentUUID": "2c5d179e-abbd-4d1c-a411-7ec0600a451d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put new positionID into position",
              "fullTitle": "Testing UC 2.2 Put new positionID into position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "a587de95-cfae-40ce-926c-daeb8edece39",
              "parentUUID": "2c5d179e-abbd-4d1c-a411-7ec0600a451d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a587de95-cfae-40ce-926c-daeb8edece39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "38d57043-b3ff-4acf-bcaa-943446fcbf28",
          "title": "Testing UC 2.3 and 2.4",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.3 and 2.4\"",
              "fullTitle": "Testing UC 2.3 and 2.4 \"before all\" hook in \"Testing UC 2.3 and 2.4\"",
              "timedOut": false,
              "duration": 148,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "cf58f545-d4e4-4672-a43d-eda65d95206e",
              "parentUUID": "38d57043-b3ff-4acf-bcaa-943446fcbf28",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside position",
              "fullTitle": "Testing UC 2.3 and 2.4 Put inside position",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "6f50c35e-7c69-4418-b181-ac4ea1319bb0",
              "parentUUID": "38d57043-b3ff-4acf-bcaa-943446fcbf28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f50c35e-7c69-4418-b181-ac4ea1319bb0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f614382c-7804-438e-a543-17594fc891f6",
          "title": "Testing UC 2.5",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.5\"",
              "fullTitle": "Testing UC 2.5 \"before all\" hook in \"Testing UC 2.5\"",
              "timedOut": false,
              "duration": 145,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "325fbe29-2cee-48ff-98ee-4f495fe506a5",
              "parentUUID": "f614382c-7804-438e-a543-17594fc891f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete position by positionID",
              "fullTitle": "Testing UC 2.5 Delete position by positionID",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/position/${posID}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/position/${posID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "f275c643-c7db-49dd-b936-db56f99fd65d",
              "parentUUID": "f614382c-7804-438e-a543-17594fc891f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f275c643-c7db-49dd-b936-db56f99fd65d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
          "title": "Test RestockOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test RestockOrder APIs\"",
              "fullTitle": "Test RestockOrder APIs \"before all\" hook in \"Test RestockOrder APIs\"",
              "timedOut": false,
              "duration": 170,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10, 1, 1, 1));\nawait localDAO.addTestDescriptor(\"test descriptor 3\", \"This test is described by...\", 1);\nawait localDAO.addTestResult(\"12345678901234567890123456789015\", 1, \"2021/11/28\", false);",
              "err": {},
              "uuid": "c3b0dbcf-d2b7-4293-8e7c-daae95b932f8",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new restock order",
              "fullTitle": "Test RestockOrder APIs Adding a new restock order",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    supplierId : supplierId\n};\nagent.post('/api/restockOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "fd21d443-cbbd-4ec2-8336-7b05c9d8821b",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all restock orders",
              "fullTitle": "Test RestockOrder APIs Getting all restock orders",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/restockOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "58e7d2c7-51c8-43b3-bb87-c905f60e4c21",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all restock orders issued",
              "fullTitle": "Test RestockOrder APIs Getting all restock orders issued",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/restockOrdersIssued').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "6362a4e8-4b8c-4abf-8bab-c5b5048cad2e",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting restock order by ID",
              "fullTitle": "Test RestockOrder APIs Getting restock order by ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "1420e176-91c4-48ca-a170-6502341c3bf9",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "a47a34be-dc94-450b-8b6b-cb1a38b922fa",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting restock order by ID",
              "fullTitle": "Test RestockOrder APIs Getting restock order by ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "5ecc449e-0d6b-4422-8538-97f0d8103fa7",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a transport note",
              "fullTitle": "Test RestockOrder APIs Adding a transport note",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/transportNote`).send(tNote).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.transportNote.deliveryDate.should.equal(tNote.transportNote.deliveryDate);\n        done();\n    });\n});",
              "err": {},
              "uuid": "e62febfd-692a-4272-8865-69e6eedbde9c",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "883241d8-73d1-4b96-ab29-78776ef2b9da",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting restock order by ID",
              "fullTitle": "Test RestockOrder APIs Getting restock order by ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "fcd7c4b3-d5e9-49f4-a33b-d87b72c5c968",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding skuitems",
              "fullTitle": "Test RestockOrder APIs Adding skuitems",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/skuItems`).send({skuItems:skuItems}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        console.log(res2.body);\n        expect(res2.body.skuItems).to.deep.equalInAnyOrder(skuItems);\n        done();\n    });\n});",
              "err": {},
              "uuid": "095a5766-d304-4849-961f-b6d2952f78fd",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "49e41429-e82d-41c4-83a0-5602dd6801f5",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieving return items",
              "fullTitle": "Test RestockOrder APIs Retrieving return items",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}/returnItems`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "db0cafcf-58f7-473d-bf65-e8dfb93fb287",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting restock order",
              "fullTitle": "Test RestockOrder APIs Deleting restock order",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/restockOrder/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "cdc2ad34-a6e1-4a34-ae40-3d7e32028cc2",
              "parentUUID": "f28256ec-de84-4897-9c7c-226d8d1b1f6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd21d443-cbbd-4ec2-8336-7b05c9d8821b",
            "58e7d2c7-51c8-43b3-bb87-c905f60e4c21",
            "6362a4e8-4b8c-4abf-8bab-c5b5048cad2e",
            "1420e176-91c4-48ca-a170-6502341c3bf9",
            "a47a34be-dc94-450b-8b6b-cb1a38b922fa",
            "5ecc449e-0d6b-4422-8538-97f0d8103fa7",
            "e62febfd-692a-4272-8865-69e6eedbde9c",
            "883241d8-73d1-4b96-ab29-78776ef2b9da",
            "fcd7c4b3-d5e9-49f4-a33b-d87b72c5c968",
            "095a5766-d304-4849-961f-b6d2952f78fd",
            "49e41429-e82d-41c4-83a0-5602dd6801f5",
            "db0cafcf-58f7-473d-bf65-e8dfb93fb287",
            "cdc2ad34-a6e1-4a34-ae40-3d7e32028cc2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "161951c6-95a9-47ef-bc8e-e2b572242e8e",
          "title": "Testing UC5.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC5.1\"",
              "fullTitle": "Testing UC5.1 \"before all\" hook in \"Testing UC5.1\"",
              "timedOut": false,
              "duration": 170,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10.99, 1, 1, 1));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"itemId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);\nawait localDAO.editRestockOrderState(1, \"DELIVERY\");",
              "err": {},
              "uuid": "95b1ad13-a354-4fb4-9cde-3420ab0c54e2",
              "parentUUID": "161951c6-95a9-47ef-bc8e-e2b572242e8e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Changing restock order state",
              "fullTitle": "Testing UC5.1 Changing restock order state",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "ec91d38a-a945-48d0-9bc9-932905f98206",
              "parentUUID": "161951c6-95a9-47ef-bc8e-e2b572242e8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding skuitems",
              "fullTitle": "Testing UC5.1 Adding skuitems",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/skuItems`).send({skuItems:skuItems}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        console.log(res2.body);\n        expect(res2.body.skuItems).to.deep.equalInAnyOrder(skuItems);\n        done();\n    });\n});",
              "err": {},
              "uuid": "020ee6a9-f86b-4123-bed3-62cac481fef5",
              "parentUUID": "161951c6-95a9-47ef-bc8e-e2b572242e8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec91d38a-a945-48d0-9bc9-932905f98206",
            "020ee6a9-f86b-4123-bed3-62cac481fef5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fb586329-416d-4f8c-bacc-eba11f6a8e1b",
          "title": "Testing UC5.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC5.2\"",
              "fullTitle": "Testing UC5.2 \"before all\" hook in \"Testing UC5.2\"",
              "timedOut": false,
              "duration": 192,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10.99, 1, 1, 1));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"itemId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);\nawait localDAO.editRestockOrderState(1, \"DELIVERED\");\nawait localDAO.editRestockOrderSkuItems(1, [{rfid : '12345678901234567890123456789015', SKUId : 1,\"itemId\":1}]);\nawait localDAO.addTestDescriptor(\"test descriptor 3\", \"This test is described by...\", 1);",
              "err": {},
              "uuid": "6dabc20f-cb31-487f-9069-ef264ce1e47e",
              "parentUUID": "fb586329-416d-4f8c-bacc-eba11f6a8e1b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a test result to an SKU",
              "fullTitle": "Testing UC5.2 Adding a test result to an SKU",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.post('/api/skuitems/testResult').send({rfid:rfid, idTestDescriptor:idTestDescriptor, Date:Date, Result:Result}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "f66208aa-f0a5-4aa8-ab2d-05395ab15189",
              "parentUUID": "fb586329-416d-4f8c-bacc-eba11f6a8e1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Testing UC5.2 Changing restock order state",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "f09af720-0bc7-44e7-a879-8fce9c9c69d1",
              "parentUUID": "fb586329-416d-4f8c-bacc-eba11f6a8e1b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f66208aa-f0a5-4aa8-ab2d-05395ab15189",
            "f09af720-0bc7-44e7-a879-8fce9c9c69d1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8597909a-fa47-479e-ade2-1be448e59da5",
          "title": "Test ReturnOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/returnOrderRoute.js",
          "file": "/test/returnOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test ReturnOrder APIs\"",
              "fullTitle": "Test ReturnOrder APIs \"before all\" hook in \"Test ReturnOrder APIs\"",
              "timedOut": false,
              "duration": 167,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789016'));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789038'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10, 1, 1, 1));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"itemId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);",
              "err": {},
              "uuid": "e5236edf-047b-4ba9-9e25-5a8daa886e91",
              "parentUUID": "8597909a-fa47-479e-ade2-1be448e59da5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new return order",
              "fullTitle": "Test ReturnOrder APIs Adding a new return order",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    returnDate : returnDate,\n    products : products,\n    restockOrderId : restockOrderId\n};\nagent.post('/api/returnOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "b7206117-961f-4ea3-8eff-9cc6ed3ac46f",
              "parentUUID": "8597909a-fa47-479e-ade2-1be448e59da5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all return orders",
              "fullTitle": "Test ReturnOrder APIs Getting all return orders",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/returnOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "940c68db-47b7-4e04-8f08-45162a54e5f6",
              "parentUUID": "8597909a-fa47-479e-ade2-1be448e59da5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting return order by ID",
              "fullTitle": "Test ReturnOrder APIs Getting return order by ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/returnOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "5a774b4b-7fff-458b-8b25-f328e5976224",
              "parentUUID": "8597909a-fa47-479e-ade2-1be448e59da5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting return order",
              "fullTitle": "Test ReturnOrder APIs Deleting return order",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/returnOrder/${ID}`).then(res => {\n   done();\n});",
              "err": {},
              "uuid": "c585038b-8baf-4454-8f61-5b5ddf8338da",
              "parentUUID": "8597909a-fa47-479e-ade2-1be448e59da5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7206117-961f-4ea3-8eff-9cc6ed3ac46f",
            "940c68db-47b7-4e04-8f08-45162a54e5f6",
            "5a774b4b-7fff-458b-8b25-f328e5976224",
            "c585038b-8baf-4454-8f61-5b5ddf8338da"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "39c0146c-f9a2-4080-8e4f-1cf3b81ed729",
          "title": "Testing UC6",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/returnOrderRoute.js",
          "file": "/test/returnOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC6\"",
              "fullTitle": "Testing UC6 \"before all\" hook in \"Testing UC6\"",
              "timedOut": false,
              "duration": 165,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789016'));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789038'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10, 1, 1, 1));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);",
              "err": {},
              "uuid": "d79924c5-c533-4959-a593-266ab04d6b9d",
              "parentUUID": "39c0146c-f9a2-4080-8e4f-1cf3b81ed729",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC6 Put inside sku",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "665ed217-f368-4d6f-88c9-2496abf436f5",
              "parentUUID": "39c0146c-f9a2-4080-8e4f-1cf3b81ed729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new return order",
              "fullTitle": "Testing UC6 Adding a new return order",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    returnDate : returnDate,\n    products : products,\n    restockOrderId : restockOrderId\n};\nagent.post('/api/returnOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "437a568d-6c7e-4480-a2b9-a9b88ccab2fd",
              "parentUUID": "39c0146c-f9a2-4080-8e4f-1cf3b81ed729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC6 Put inside sku",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "a1ebf4cd-6793-4aab-b26f-1336542f5d88",
              "parentUUID": "39c0146c-f9a2-4080-8e4f-1cf3b81ed729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku availability",
              "fullTitle": "Testing UC6 Getting sku availability",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expectedAvailable);\n    done();\n});",
              "err": {},
              "uuid": "88c582d8-5ed6-47cd-bbac-f2428490fc2b",
              "parentUUID": "39c0146c-f9a2-4080-8e4f-1cf3b81ed729",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "665ed217-f368-4d6f-88c9-2496abf436f5",
            "437a568d-6c7e-4480-a2b9-a9b88ccab2fd",
            "a1ebf4cd-6793-4aab-b26f-1336542f5d88",
            "88c582d8-5ed6-47cd-bbac-f2428490fc2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
          "title": "Test TestDescriptor APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test TestDescriptor APIs\"",
              "fullTitle": "Test TestDescriptor APIs \"before all\" hook in \"Test TestDescriptor APIs\"",
              "timedOut": false,
              "duration": 149,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "bea3bc39-b918-497f-990c-7bcd0a694458",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "ae5a27ef-7dbf-4e4c-802b-1c3eed923648",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "d17e12f5-1553-4773-aaa9-45327253f06b",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "96e159e0-22d7-4ecc-b472-7d5fd6b2e4c4",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptors",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptors",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/testDescriptors').then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tdone();\n});",
              "err": {},
              "uuid": "4b3eea64-98e1-41d8-be37-2a18886eb4f7",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "d17ef76f-13fa-4b36-92b2-3c8aa1279a79",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "186840db-300b-4b54-80f5-b2e136f8f2c2",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "e0b583d9-87b6-4f3a-a013-61a2953fa376",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "3734f113-735b-4fbf-a2c9-7936ec396725",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "60afd02d-1dc1-434e-9e82-a68fd1ba2763",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "c001bc1c-4a62-4934-97e4-c96f3b67aeac",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "5e7b9274-b226-42dc-9935-d2135e23b336",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete test descriptor",
              "fullTitle": "Test TestDescriptor APIs Delete test descriptor",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/testDescriptor/${testDescID}`).then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tagent.get(`/api/testDescriptor/${testDescID}`).then((res2) => {\n\t\texpect(res2.body).to.deep.equalInAnyOrder({});\n\t\tdone();\n\t});\n});",
              "err": {},
              "uuid": "fccadc48-e9ed-459b-bae0-071a07e6c49b",
              "parentUUID": "4da1bbdf-4591-4774-a7b8-07dbef99cc7a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae5a27ef-7dbf-4e4c-802b-1c3eed923648",
            "d17e12f5-1553-4773-aaa9-45327253f06b",
            "96e159e0-22d7-4ecc-b472-7d5fd6b2e4c4",
            "4b3eea64-98e1-41d8-be37-2a18886eb4f7",
            "d17ef76f-13fa-4b36-92b2-3c8aa1279a79",
            "186840db-300b-4b54-80f5-b2e136f8f2c2",
            "e0b583d9-87b6-4f3a-a013-61a2953fa376",
            "3734f113-735b-4fbf-a2c9-7936ec396725",
            "60afd02d-1dc1-434e-9e82-a68fd1ba2763",
            "c001bc1c-4a62-4934-97e4-c96f3b67aeac",
            "5e7b9274-b226-42dc-9935-d2135e23b336",
            "fccadc48-e9ed-459b-bae0-071a07e6c49b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4cff152a-080e-4fba-8dc7-37133fcd613b",
          "title": "Testing UC 12.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.1\"",
              "fullTitle": "Testing UC 12.1 \"before all\" hook in \"Testing UC 12.1\"",
              "timedOut": false,
              "duration": 143,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "00c49613-79e5-4068-8bb3-288fcbac76c8",
              "parentUUID": "4cff152a-080e-4fba-8dc7-37133fcd613b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.1 Adding a new test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "0740dc6f-9d84-44bf-97e8-68188b0f9268",
              "parentUUID": "4cff152a-080e-4fba-8dc7-37133fcd613b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0740dc6f-9d84-44bf-97e8-68188b0f9268"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b00aca7d-877b-4215-94fa-d864f0c1fcab",
          "title": "Testing UC 12.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.2\"",
              "fullTitle": "Testing UC 12.2 \"before all\" hook in \"Testing UC 12.2\"",
              "timedOut": false,
              "duration": 147,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "858f3850-8c15-4437-9715-70542cde0507",
              "parentUUID": "b00aca7d-877b-4215-94fa-d864f0c1fcab",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.2 Adding a new test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "1358f7e1-caa3-4cc9-8cf1-f49139ec3e76",
              "parentUUID": "b00aca7d-877b-4215-94fa-d864f0c1fcab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Testing UC 12.2 Put inside test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "226a44cf-b681-4c99-a3eb-d0850da03dfb",
              "parentUUID": "b00aca7d-877b-4215-94fa-d864f0c1fcab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1358f7e1-caa3-4cc9-8cf1-f49139ec3e76",
            "226a44cf-b681-4c99-a3eb-d0850da03dfb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e4524658-6022-4a4e-8d02-781b212e7843",
          "title": "Testing UC 12.3",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.3\"",
              "fullTitle": "Testing UC 12.3 \"before all\" hook in \"Testing UC 12.3\"",
              "timedOut": false,
              "duration": 142,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "833ebeb1-aff6-4545-a151-0944db4267ae",
              "parentUUID": "e4524658-6022-4a4e-8d02-781b212e7843",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.3 Adding a new test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "7225442d-eee2-4d3e-986b-56e498364b06",
              "parentUUID": "e4524658-6022-4a4e-8d02-781b212e7843",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete test descriptor",
              "fullTitle": "Testing UC 12.3 Delete test descriptor",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/testDescriptor/${testDescID}`).then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tagent.get(`/api/testDescriptor/${testDescID}`).then((res2) => {\n\t\texpect(res2.body).to.deep.equalInAnyOrder({});\n\t\tdone();\n\t});\n});",
              "err": {},
              "uuid": "85c43392-1eee-4455-aacc-dc64f830b577",
              "parentUUID": "e4524658-6022-4a4e-8d02-781b212e7843",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7225442d-eee2-4d3e-986b-56e498364b06",
            "85c43392-1eee-4455-aacc-dc64f830b577"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "989c067a-3583-412c-8c85-5e90e6b1aac2",
          "title": "Test test Result APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testResultRoute.js",
          "file": "/test/testResultRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test test Result APIs\"",
              "fullTitle": "Test test Result APIs \"before each\" hook in \"Test test Result APIs\"",
              "timedOut": false,
              "duration": 153,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(\n\tnew SKU('SKU1', 10, 10, 100, 'no notes', null, null, 20)\n);\nawait dao.addSKUItem(\n\tnew SKUItem(1, true, '24-05-2022', '12345678901234567890123456789012')\n);",
              "err": {},
              "uuid": "b1d1a176-2ac9-4337-b01f-28112e240fbf",
              "parentUUID": "989c067a-3583-412c-8c85-5e90e6b1aac2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "72afea49-f752-4c87-9169-030baaad737a",
              "parentUUID": "989c067a-3583-412c-8c85-5e90e6b1aac2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "d9e6d05c-7b94-450d-b2bb-654f029b9a56",
              "parentUUID": "989c067a-3583-412c-8c85-5e90e6b1aac2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "72afea49-f752-4c87-9169-030baaad737a",
            "d9e6d05c-7b94-450d-b2bb-654f029b9a56"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1fe108a0-e036-4596-ade7-0975175a6f12",
          "title": "Test test Result APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testResultRoute.js",
          "file": "/test/testResultRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test test Result APIs\"",
              "fullTitle": "Test test Result APIs \"before each\" hook in \"Test test Result APIs\"",
              "timedOut": false,
              "duration": 177,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(\n\tnew SKU('SKU1', 10, 10, 100, 'no notes', null, null, 20)\n);\nawait dao.addSKUItem(\n\tnew SKUItem(1, true, '24-05-2022', '12345678901234567890123456789012')\n);\nawait dao.addTestDescriptor('TD1', 'Test description 1', 1);\nawait dao.addTestDescriptor('TD2', 'Test description 2', 1);\nawait dao.addTestResult(\n\t'12345678901234567890123456789012',\n\t1,\n\t'24-05-2022',\n\ttrue\n);\nawait dao.addTestResult(\n\t'12345678901234567890123456789012',\n\t2,\n\t'22-05-2022',\n\tfalse\n);",
              "err": {},
              "uuid": "23fce33e-765d-4367-aa24-027fa595dd6f",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "7d3081df-b602-4b55-b0f2-69532c075a5a",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "4cdc3f1e-2fd7-486d-9c27-ecf476fb1886",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "c9c1f70b-598e-4de4-bd13-d10ae9ca4dba",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "3fdc3190-ded0-4668-97c8-ec5829711383",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "6f311c5c-756f-4ce6-a366-1e24d88660ad",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "f5c97d83-37c6-4954-b9fa-b23ea4d4a9a0",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "9923f936-ee9f-4b20-974d-f58ca077fbf7",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "7f19bfae-be82-4ca0-9fea-fc35e60ad30d",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "3019110e-8343-4a2d-a37f-429717845538",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "ebcd592f-5334-4369-9135-102afb6afe5f",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "1cc0ffbb-ba35-48eb-9a53-626fd1e849bb",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete test result : DELETE /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs delete test result : DELETE /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "4ff3b9fc-67a7-41cf-8c60-1f56b4e02894",
              "parentUUID": "1fe108a0-e036-4596-ade7-0975175a6f12",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d3081df-b602-4b55-b0f2-69532c075a5a",
            "4cdc3f1e-2fd7-486d-9c27-ecf476fb1886",
            "c9c1f70b-598e-4de4-bd13-d10ae9ca4dba",
            "3fdc3190-ded0-4668-97c8-ec5829711383",
            "6f311c5c-756f-4ce6-a366-1e24d88660ad",
            "f5c97d83-37c6-4954-b9fa-b23ea4d4a9a0",
            "9923f936-ee9f-4b20-974d-f58ca077fbf7",
            "7f19bfae-be82-4ca0-9fea-fc35e60ad30d",
            "3019110e-8343-4a2d-a37f-429717845538",
            "ebcd592f-5334-4369-9135-102afb6afe5f",
            "1cc0ffbb-ba35-48eb-9a53-626fd1e849bb",
            "4ff3b9fc-67a7-41cf-8c60-1f56b4e02894"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
          "title": "Test user APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/userRoute.js",
          "file": "/test/userRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test user APIs\"",
              "fullTitle": "Test user APIs \"before each\" hook in \"Test user APIs\"",
              "timedOut": false,
              "duration": 155,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.addUser(\n\tnew User('Ahmed', 'Khater', 'supplier', 's123456@mail.com', '12345678')\n);\nawait dao.addUser(\n\tnew User('Mohamed', 'Khater', 'customer', '127812@mail.com', '12345678')\n);\nawait dao.addUser(\n\tnew User('Eslam', 'Khater', 'manager', '987654321@mail.com', '12345678')\n);",
              "err": {},
              "uuid": "9d713ef3-4463-405a-a8d2-c7228fceadec",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "bbe6ec7f-9361-4f63-b023-6a7f1fa29927",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "30df0f61-a724-40f7-93d1-4d07b48818d3",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "c7c04eb8-661e-4fc3-8500-44287418c158",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get users : GET /api/users",
              "fullTitle": "Test user APIs get users : GET /api/users",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/users')\n\t.then(function (res) {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "e5d18c71-50dc-4c49-b31e-cfcb01cc54a7",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting suppliers : GET /api/suppliers",
              "fullTitle": "Test user APIs Getting suppliers : GET /api/suppliers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/suppliers')\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "6b2ae9df-8591-44c3-84c5-ea733f8dc190",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "e5866fb7-999f-4ecc-ad15-528de8fcfad7",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "afcfc137-76da-4d6a-bbe3-82ed782037a7",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "14f84b52-0ec9-4a3f-92dc-b249df6e329a",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "6886ff0a-1704-44d9-af0f-412ec317c228",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "41218b32-4891-46df-a5a5-ca2ad86979c9",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "48d11050-cca2-4e54-9cb4-40bf5b722548",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "ee44047a-2ae9-4b01-93f7-283396e8558d",
              "parentUUID": "294427d9-d342-4cc3-aeab-f6d6dbedfaa4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbe6ec7f-9361-4f63-b023-6a7f1fa29927",
            "30df0f61-a724-40f7-93d1-4d07b48818d3",
            "c7c04eb8-661e-4fc3-8500-44287418c158",
            "e5d18c71-50dc-4c49-b31e-cfcb01cc54a7",
            "6b2ae9df-8591-44c3-84c5-ea733f8dc190",
            "e5866fb7-999f-4ecc-ad15-528de8fcfad7",
            "afcfc137-76da-4d6a-bbe3-82ed782037a7",
            "14f84b52-0ec9-4a3f-92dc-b249df6e329a",
            "6886ff0a-1704-44d9-af0f-412ec317c228",
            "41218b32-4891-46df-a5a5-ca2ad86979c9",
            "48d11050-cca2-4e54-9cb4-40bf5b722548",
            "ee44047a-2ae9-4b01-93f7-283396e8558d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}