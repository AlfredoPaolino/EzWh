{
  "stats": {
    "suites": 25,
    "tests": 119,
    "passes": 119,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-11T21:38:17.680Z",
    "end": "2022-06-11T21:38:28.082Z",
    "duration": 10402,
    "testsRegistered": 119,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4ddda682-6874-4409-a206-7e2395f1996f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a2a4855b-2557-4782-bd94-9a6c84477a71",
          "title": "Test SKUItem APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKUItemRoute.js",
          "file": "/test/SKUItemRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test SKUItem APIs\"",
              "fullTitle": "Test SKUItem APIs \"before all\" hook in \"Test SKUItem APIs\"",
              "timedOut": false,
              "duration": 151,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));",
              "err": {},
              "uuid": "70e5d398-d3d2-4e84-86be-f300fd4a4757",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKUItem",
              "fullTitle": "Test SKUItem APIs Adding a new SKUItem",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    \"RFID\" : RFID,\n    \"SKUId\" : SKUId,\n    \"DateOfStock\" : DateOfStock\n};\nagent.post('/api/skuitem').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "9684dd11-c59c-4e1b-8d1c-f24e70bbb620",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new SKUItem",
              "fullTitle": "Test SKUItem APIs Adding a new SKUItem",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    \"RFID\" : RFID,\n    \"SKUId\" : SKUId,\n    \"DateOfStock\" : DateOfStock\n};\nagent.post('/api/skuitem').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "c1e4aec8-92b4-402f-b2ce-709a3e0924f0",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku items",
              "fullTitle": "Test SKUItem APIs Getting sku items",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/skuitems').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "a8654e4b-3947-47ff-ab71-0ff201c6efff",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Test SKUItem APIs Getting sku",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "11f201c9-04b7-4d62-9d71-0676ebf86371",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "8a581cde-f0c2-4dc0-8ef3-e74b638c85e0",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "1692b7f6-b658-4a0c-8ad6-1b051786b696",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "20c5b0e6-1bc0-424c-9052-a2886f0c596d",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete sku",
              "fullTitle": "Test SKUItem APIs Delete sku",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/skuitems/${rfid}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/skuitems/${rfid}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "56760636-fca5-4df5-9c6e-aedad4c6b80d",
              "parentUUID": "a2a4855b-2557-4782-bd94-9a6c84477a71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9684dd11-c59c-4e1b-8d1c-f24e70bbb620",
            "c1e4aec8-92b4-402f-b2ce-709a3e0924f0",
            "a8654e4b-3947-47ff-ab71-0ff201c6efff",
            "11f201c9-04b7-4d62-9d71-0676ebf86371",
            "8a581cde-f0c2-4dc0-8ef3-e74b638c85e0",
            "1692b7f6-b658-4a0c-8ad6-1b051786b696",
            "20c5b0e6-1bc0-424c-9052-a2886f0c596d",
            "56760636-fca5-4df5-9c6e-aedad4c6b80d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 75,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "60877b94-623d-4b89-a846-a7353b532cb8",
          "title": "Test SKU APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test SKU APIs\"",
              "fullTitle": "Test SKU APIs \"before each\" hook in \"Test SKU APIs\"",
              "timedOut": false,
              "duration": 138,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 1, 1, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "4116a910-c457-40ce-ba75-8affd359635f",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKU",
              "fullTitle": "Test SKU APIs Adding a new SKU",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "b0972def-3254-4ee7-9617-4e9618789ccc",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new SKU",
              "fullTitle": "Test SKU APIs Adding a new SKU",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "858a6260-35bb-4e78-81e2-84655a0846ff",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting skus",
              "fullTitle": "Test SKU APIs Getting skus",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/skus').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "bf05a330-a748-4ec0-b1c4-85ab09283114",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Test SKU APIs Getting sku",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "0e24969e-380d-4942-ad31-1ba9cc704eba",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "09bf2cc9-e1a7-4f65-b5dd-6ff0499a8043",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "8b6e8488-650f-47ed-be42-eaead38f5943",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "81c8f74f-936d-4fa2-a352-2e0d1d3ca0c5",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put SKU position",
              "fullTitle": "Test SKU APIs Put SKU position",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}/position`).send({\n    position : position\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "ae9c1121-6db3-46c5-8a3c-6386df54fc13",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete sku",
              "fullTitle": "Test SKU APIs Delete sku",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/skus/${id}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/sku/${id}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "2432c0f6-caf0-4627-840d-a635647c58c7",
              "parentUUID": "60877b94-623d-4b89-a846-a7353b532cb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0972def-3254-4ee7-9617-4e9618789ccc",
            "858a6260-35bb-4e78-81e2-84655a0846ff",
            "bf05a330-a748-4ec0-b1c4-85ab09283114",
            "0e24969e-380d-4942-ad31-1ba9cc704eba",
            "09bf2cc9-e1a7-4f65-b5dd-6ff0499a8043",
            "8b6e8488-650f-47ed-be42-eaead38f5943",
            "81c8f74f-936d-4fa2-a352-2e0d1d3ca0c5",
            "ae9c1121-6db3-46c5-8a3c-6386df54fc13",
            "2432c0f6-caf0-4627-840d-a635647c58c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "40164807-7a9b-4b56-82fe-32ed3fe5f95b",
          "title": "Testing UC 1.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.1\"",
              "fullTitle": "Testing UC 1.1 \"before all\" hook in \"Testing UC 1.1\"",
              "timedOut": false,
              "duration": 142,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');",
              "err": {},
              "uuid": "4bc6c1a2-5ff0-4544-861a-de0c9f3bc917",
              "parentUUID": "40164807-7a9b-4b56-82fe-32ed3fe5f95b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKU",
              "fullTitle": "Testing UC 1.1 Adding a new SKU",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "e9943d36-d0c0-44c6-8585-dc870f24aef4",
              "parentUUID": "40164807-7a9b-4b56-82fe-32ed3fe5f95b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9943d36-d0c0-44c6-8585-dc870f24aef4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6850fa51-33db-4457-834c-378edc37875a",
          "title": "Testing UC 1.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.2\"",
              "fullTitle": "Testing UC 1.2 \"before all\" hook in \"Testing UC 1.2\"",
              "timedOut": false,
              "duration": 139,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 1, 1, 10, \"first SKU\", null, null, 50));\nawait localDAO.addPosition(\"800234543413\", \"8002\", \"3454\", \"3413\", 1000, 1000);",
              "err": {},
              "uuid": "d39e0811-aa06-4dfb-b099-111d39dd0822",
              "parentUUID": "6850fa51-33db-4457-834c-378edc37875a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put SKU position",
              "fullTitle": "Testing UC 1.2 Put SKU position",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}/position`).send({\n    position : position\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "05e902a8-9364-4fc6-bec2-3498dcd284e7",
              "parentUUID": "6850fa51-33db-4457-834c-378edc37875a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Testing UC 1.2 Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "c5d5e314-f560-4bb9-95c3-adad8e540fd6",
              "parentUUID": "6850fa51-33db-4457-834c-378edc37875a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05e902a8-9364-4fc6-bec2-3498dcd284e7",
            "c5d5e314-f560-4bb9-95c3-adad8e540fd6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "829da020-053c-4f11-ba2b-0b5bece59b76",
          "title": "Testing UC 1.3",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.3\"",
              "fullTitle": "Testing UC 1.3 \"before all\" hook in \"Testing UC 1.3\"",
              "timedOut": false,
              "duration": 144,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));",
              "err": {},
              "uuid": "291b6dd6-5507-4001-8197-76fdd2c56c91",
              "parentUUID": "829da020-053c-4f11-ba2b-0b5bece59b76",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC 1.3 Put inside sku",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "5bbba6d5-717d-4bbd-9d7d-72f39c880742",
              "parentUUID": "829da020-053c-4f11-ba2b-0b5bece59b76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Testing UC 1.3 Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "f94ee2a3-2e65-4102-8353-96c2d6b1f488",
              "parentUUID": "829da020-053c-4f11-ba2b-0b5bece59b76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5bbba6d5-717d-4bbd-9d7d-72f39c880742",
            "f94ee2a3-2e65-4102-8353-96c2d6b1f488"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "13ee4c8b-4ca9-4dac-a3d2-12c7ecf4f622",
          "title": "Test InternalOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test InternalOrder APIs\"",
              "fullTitle": "Test InternalOrder APIs \"before all\" hook in \"Test InternalOrder APIs\"",
              "timedOut": false,
              "duration": 169,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));",
              "err": {},
              "uuid": "59eebee1-25a2-4f3a-89ed-d342bf5759be",
              "parentUUID": "13ee4c8b-4ca9-4dac-a3d2-12c7ecf4f622",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new internal order",
              "fullTitle": "Test InternalOrder APIs Adding a new internal order",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    customerId : customerId\n};\nagent.post('/api/internalOrders').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "d3151857-1dd8-4bab-94bf-55922d196b8f",
              "parentUUID": "13ee4c8b-4ca9-4dac-a3d2-12c7ecf4f622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all internal orders",
              "fullTitle": "Test InternalOrder APIs Getting all internal orders",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/internalOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "d0c2f063-24e3-42d0-acbe-5b9a5ede59a7",
              "parentUUID": "13ee4c8b-4ca9-4dac-a3d2-12c7ecf4f622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all internal orders issued",
              "fullTitle": "Test InternalOrder APIs Getting all internal orders issued",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/internalOrdersIssued').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "2d8ae0c8-c0d8-46ab-a938-1ff715c2a437",
              "parentUUID": "13ee4c8b-4ca9-4dac-a3d2-12c7ecf4f622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Test InternalOrder APIs Changing internal order state",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "0e477964-fe3a-460f-883c-2ec68aa473a2",
              "parentUUID": "13ee4c8b-4ca9-4dac-a3d2-12c7ecf4f622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Test InternalOrder APIs Changing internal order state",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "880a9fa9-b6ec-47f9-bf07-c18a0b02d188",
              "parentUUID": "13ee4c8b-4ca9-4dac-a3d2-12c7ecf4f622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting an internal order",
              "fullTitle": "Test InternalOrder APIs Deleting an internal order",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/internalOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    });\n})",
              "err": {},
              "uuid": "5c526147-f924-4664-b500-46bfe5dd4c2f",
              "parentUUID": "13ee4c8b-4ca9-4dac-a3d2-12c7ecf4f622",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3151857-1dd8-4bab-94bf-55922d196b8f",
            "d0c2f063-24e3-42d0-acbe-5b9a5ede59a7",
            "2d8ae0c8-c0d8-46ab-a938-1ff715c2a437",
            "0e477964-fe3a-460f-883c-2ec68aa473a2",
            "880a9fa9-b6ec-47f9-bf07-c18a0b02d188",
            "5c526147-f924-4664-b500-46bfe5dd4c2f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 52,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "40112e18-df2d-4740-9763-9250fb0e60da",
          "title": "Testing UC9",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC9\"",
              "fullTitle": "Testing UC9 \"before all\" hook in \"Testing UC9\"",
              "timedOut": false,
              "duration": 147,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));",
              "err": {},
              "uuid": "f5768e2b-41d4-4b12-b499-3d7b1b5d3e51",
              "parentUUID": "40112e18-df2d-4740-9763-9250fb0e60da",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new internal order",
              "fullTitle": "Testing UC9 Adding a new internal order",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    customerId : customerId\n};\nagent.post('/api/internalOrders').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "8bcf4cd3-eb62-4dcb-98f8-940e2f00d6e7",
              "parentUUID": "40112e18-df2d-4740-9763-9250fb0e60da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Testing UC9 Changing internal order state",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "2ad0c0fc-94f0-491c-8ca7-494fc6bcc027",
              "parentUUID": "40112e18-df2d-4740-9763-9250fb0e60da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8bcf4cd3-eb62-4dcb-98f8-940e2f00d6e7",
            "2ad0c0fc-94f0-491c-8ca7-494fc6bcc027"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "343e1fa0-3006-425b-9b06-058254a093c9",
          "title": "Testing UC10",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC10\"",
              "fullTitle": "Testing UC10 \"before all\" hook in \"Testing UC10\"",
              "timedOut": false,
              "duration": 164,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addInternalOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"description\":\"a product\",\"price\":10.99,\"qty\":3}], 1);\nawait localDAO.editInternalOrder(1, \"ACCEPTED\");",
              "err": {},
              "uuid": "b585d57f-a329-4800-8af2-892c9394398e",
              "parentUUID": "343e1fa0-3006-425b-9b06-058254a093c9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Changing internal order state",
              "fullTitle": "Testing UC10 Changing internal order state",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "c4afb171-b077-486a-af39-294cb80a8397",
              "parentUUID": "343e1fa0-3006-425b-9b06-058254a093c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku availability",
              "fullTitle": "Testing UC10 Getting sku availability",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    res.body.Available.should.equal(expectedAvailable);\n    done();\n});",
              "err": {},
              "uuid": "f37d7cf7-5db0-42e5-a4ed-fcac8c40457f",
              "parentUUID": "343e1fa0-3006-425b-9b06-058254a093c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4afb171-b077-486a-af39-294cb80a8397",
            "f37d7cf7-5db0-42e5-a4ed-fcac8c40457f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d5e28113-370d-4216-8e67-a2c980b178b3",
          "title": "Test item APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/itemRoute.js",
          "file": "/test/itemRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test item APIs\"",
              "fullTitle": "Test item APIs \"before each\" hook in \"Test item APIs\"",
              "timedOut": false,
              "duration": 162,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(new SKU('sku 1', 10, 10, 100, null, null, 1, 20));\nawait dao.insertSKU(new SKU('sku 2', 10, 10, 100, null, null, 2, 20));\nawait dao.addItem(new Item('a new item', 10.99, 2, 1, 1));\nawait dao.addItem(new Item('another item', 12.99, 1, 2, 2));",
              "err": {},
              "uuid": "0d871c7b-c898-451d-8fd7-c17ca7767f8b",
              "parentUUID": "d5e28113-370d-4216-8e67-a2c980b178b3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "add item : POST /api/item",
              "fullTitle": "Test item APIs add item : POST /api/item",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n\tid: id,\n\tdescription: description,\n\tprice: price,\n\tsupplierId: supplierId,\n\tSKUId: SKUId,\n};\nagent\n\t.post('/api/item')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "a3236893-fe2b-4622-94ab-40827f706849",
              "parentUUID": "d5e28113-370d-4216-8e67-a2c980b178b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get items : GET /api/items",
              "fullTitle": "Test item APIs get items : GET /api/items",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/items')\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "fb08e025-3cf7-4363-8b6e-94443c2f78fb",
              "parentUUID": "d5e28113-370d-4216-8e67-a2c980b178b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getItembyId : GET /api/items/:id",
              "fullTitle": "Test item APIs getItembyId : GET /api/items/:id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/items/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "a6d9aeea-878e-477b-927b-cd71e7dbf352",
              "parentUUID": "d5e28113-370d-4216-8e67-a2c980b178b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getItembyId : GET /api/items/:id",
              "fullTitle": "Test item APIs getItembyId : GET /api/items/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/items/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "c28e442c-9c74-4604-ae4d-c3e0474750aa",
              "parentUUID": "d5e28113-370d-4216-8e67-a2c980b178b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "editItem : PUT /api/item/:id",
              "fullTitle": "Test item APIs editItem : PUT /api/item/:id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/item/${id}`)\n\t.send({\n\t\tnewDescription: newDescription,\n\t\tnewPrice: newPrice,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "1862cd3d-3b87-41ef-af60-97dc16140896",
              "parentUUID": "d5e28113-370d-4216-8e67-a2c980b178b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteItemById : DELETE /api/items/:id",
              "fullTitle": "Test item APIs deleteItemById : DELETE /api/items/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/items/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "b3b4eee7-44cf-44b2-a50b-e1d683f56699",
              "parentUUID": "d5e28113-370d-4216-8e67-a2c980b178b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a3236893-fe2b-4622-94ab-40827f706849",
            "fb08e025-3cf7-4363-8b6e-94443c2f78fb",
            "a6d9aeea-878e-477b-927b-cd71e7dbf352",
            "c28e442c-9c74-4604-ae4d-c3e0474750aa",
            "1862cd3d-3b87-41ef-af60-97dc16140896",
            "b3b4eee7-44cf-44b2-a50b-e1d683f56699"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
          "title": "Test Position APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test Position APIs\"",
              "fullTitle": "Test Position APIs \"before all\" hook in \"Test Position APIs\"",
              "timedOut": false,
              "duration": 144,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resetDB('./EZWarehouseDB.db');",
              "err": {},
              "uuid": "e78f1b49-28a7-44c1-88c7-59d2e389627a",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new position",
              "fullTitle": "Test Position APIs Adding a new position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const position = {\n    \"positionID\" : positionID,\n    \"aisleID\" : aisleID,\n    \"row\" : row,\n    \"col\" : col,\n    \"maxWeight\" : maxWeight,\n    \"maxVolume\" : maxVolume\n};\nagent.post('/api/position').send(position).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "b90ece10-53c1-425f-87ea-be513d52430a",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new position",
              "fullTitle": "Test Position APIs Adding a new position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const position = {\n    \"positionID\" : positionID,\n    \"aisleID\" : aisleID,\n    \"row\" : row,\n    \"col\" : col,\n    \"maxWeight\" : maxWeight,\n    \"maxVolume\" : maxVolume\n};\nagent.post('/api/position').send(position).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "187ad1a5-ba3c-4faf-92e1-fff3d6f2bd5a",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting positions",
              "fullTitle": "Test Position APIs Getting positions",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/positions').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "a2ef4788-4279-4305-985c-2c3152ee7fc1",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "82deb18b-426c-42ac-bfcb-4701d1db2270",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "57a9353d-1ea6-4d4e-8df6-a9a40ebe1547",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "a6fa0f22-5d33-4431-b829-0e3224ed8c47",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "4ebe657e-beb4-4adb-9cc1-d607108f6b80",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "6b87c7a3-613c-4be8-913d-b75b4ec1616d",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "ece7eb29-0938-416d-8f4e-f7b1f5a60ec8",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete position by positionID",
              "fullTitle": "Test Position APIs Delete position by positionID",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/position/${posID}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/position/${posID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "b32c1f0f-f508-4744-bf61-05fd0aaec8c9",
              "parentUUID": "fe46deaf-51ee-4c34-b3d1-59076db510b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b90ece10-53c1-425f-87ea-be513d52430a",
            "187ad1a5-ba3c-4faf-92e1-fff3d6f2bd5a",
            "a2ef4788-4279-4305-985c-2c3152ee7fc1",
            "82deb18b-426c-42ac-bfcb-4701d1db2270",
            "57a9353d-1ea6-4d4e-8df6-a9a40ebe1547",
            "a6fa0f22-5d33-4431-b829-0e3224ed8c47",
            "4ebe657e-beb4-4adb-9cc1-d607108f6b80",
            "6b87c7a3-613c-4be8-913d-b75b4ec1616d",
            "ece7eb29-0938-416d-8f4e-f7b1f5a60ec8",
            "b32c1f0f-f508-4744-bf61-05fd0aaec8c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 49,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "889f8e60-f22b-4e46-9c9b-ae9310e72d4f",
          "title": "Testing UC 2.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.2\"",
              "fullTitle": "Testing UC 2.2 \"before all\" hook in \"Testing UC 2.2\"",
              "timedOut": false,
              "duration": 147,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "137399b6-4901-44a7-a961-866d9b35ad25",
              "parentUUID": "889f8e60-f22b-4e46-9c9b-ae9310e72d4f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put new positionID into position",
              "fullTitle": "Testing UC 2.2 Put new positionID into position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "a9b9a9bf-4123-4511-aadb-f93f4f6931d9",
              "parentUUID": "889f8e60-f22b-4e46-9c9b-ae9310e72d4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a9b9a9bf-4123-4511-aadb-f93f4f6931d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "321428eb-f6a9-4fd5-8275-7250cd7d8a64",
          "title": "Testing UC 2.3 and 2.4",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.3 and 2.4\"",
              "fullTitle": "Testing UC 2.3 and 2.4 \"before all\" hook in \"Testing UC 2.3 and 2.4\"",
              "timedOut": false,
              "duration": 194,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "9ebb47d2-c42b-48c4-8e84-5beda68a9413",
              "parentUUID": "321428eb-f6a9-4fd5-8275-7250cd7d8a64",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside position",
              "fullTitle": "Testing UC 2.3 and 2.4 Put inside position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "7efd1e32-dc6c-4a01-845c-291da061f657",
              "parentUUID": "321428eb-f6a9-4fd5-8275-7250cd7d8a64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7efd1e32-dc6c-4a01-845c-291da061f657"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e4e823c1-212f-4b77-bbbf-839192060f51",
          "title": "Testing UC 2.5",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.5\"",
              "fullTitle": "Testing UC 2.5 \"before all\" hook in \"Testing UC 2.5\"",
              "timedOut": false,
              "duration": 147,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "8da4c18e-5414-469a-bd9e-2f5c90c1cc57",
              "parentUUID": "e4e823c1-212f-4b77-bbbf-839192060f51",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete position by positionID",
              "fullTitle": "Testing UC 2.5 Delete position by positionID",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/position/${posID}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/position/${posID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "dcd5c276-45c1-4152-8efb-17ee30167873",
              "parentUUID": "e4e823c1-212f-4b77-bbbf-839192060f51",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dcd5c276-45c1-4152-8efb-17ee30167873"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8dc70a59-b967-4403-9fd9-3cb924426418",
          "title": "Test RestockOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test RestockOrder APIs\"",
              "fullTitle": "Test RestockOrder APIs \"before all\" hook in \"Test RestockOrder APIs\"",
              "timedOut": false,
              "duration": 175,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10, 1, 1, 1));\nawait localDAO.addTestDescriptor(\"test descriptor 3\", \"This test is described by...\", 1);\nawait localDAO.addTestResult(\"12345678901234567890123456789015\", 1, \"2021/11/28\", false);",
              "err": {},
              "uuid": "506c6d1f-c14e-440c-80e7-2c0e9f4f3b28",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new restock order",
              "fullTitle": "Test RestockOrder APIs Adding a new restock order",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    supplierId : supplierId\n};\nagent.post('/api/restockOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "9dfde35f-709d-4c99-b8b5-90bc66ec65b5",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all restock orders",
              "fullTitle": "Test RestockOrder APIs Getting all restock orders",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/restockOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "8f4b0511-8800-4b96-8095-25a10702cef0",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all restock orders issued",
              "fullTitle": "Test RestockOrder APIs Getting all restock orders issued",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/restockOrdersIssued').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "d768ed0b-cd6b-46e8-9946-b30d73b2a604",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting restock order by ID",
              "fullTitle": "Test RestockOrder APIs Getting restock order by ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "7335a600-a7f6-4b98-9326-9f205ddd1cc9",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "a173ad23-3f99-41c6-a740-03a50930cc45",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting restock order by ID",
              "fullTitle": "Test RestockOrder APIs Getting restock order by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "ad2461b0-8855-48e9-9370-88489ae8b401",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a transport note",
              "fullTitle": "Test RestockOrder APIs Adding a transport note",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/transportNote`).send(tNote).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.transportNote.deliveryDate.should.equal(tNote.transportNote.deliveryDate);\n        done();\n    });\n});",
              "err": {},
              "uuid": "7b055a1a-1780-47d5-8c53-c2c0f569910c",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "34d12e6d-0c4d-4229-996c-8a4d9fa717bd",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting restock order by ID",
              "fullTitle": "Test RestockOrder APIs Getting restock order by ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "4aaa68dd-867f-430a-923e-241a5114bda4",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding skuitems",
              "fullTitle": "Test RestockOrder APIs Adding skuitems",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/skuItems`).send({skuItems:skuItems}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        console.log(res2.body);\n        expect(res2.body.skuItems).to.deep.equalInAnyOrder(skuItems);\n        done();\n    });\n});",
              "err": {},
              "uuid": "eeaf529f-2582-451b-9c92-060d71306de5",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "a4508e35-2faa-459e-8ff7-8474bb498661",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieving return items",
              "fullTitle": "Test RestockOrder APIs Retrieving return items",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}/returnItems`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "48d966c5-2941-4ba5-9eb7-b761fd33f21b",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting restock order",
              "fullTitle": "Test RestockOrder APIs Deleting restock order",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/restockOrder/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "f6026fdb-1a41-419e-a38a-2ff32b7c8799",
              "parentUUID": "8dc70a59-b967-4403-9fd9-3cb924426418",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9dfde35f-709d-4c99-b8b5-90bc66ec65b5",
            "8f4b0511-8800-4b96-8095-25a10702cef0",
            "d768ed0b-cd6b-46e8-9946-b30d73b2a604",
            "7335a600-a7f6-4b98-9326-9f205ddd1cc9",
            "a173ad23-3f99-41c6-a740-03a50930cc45",
            "ad2461b0-8855-48e9-9370-88489ae8b401",
            "7b055a1a-1780-47d5-8c53-c2c0f569910c",
            "34d12e6d-0c4d-4229-996c-8a4d9fa717bd",
            "4aaa68dd-867f-430a-923e-241a5114bda4",
            "eeaf529f-2582-451b-9c92-060d71306de5",
            "a4508e35-2faa-459e-8ff7-8474bb498661",
            "48d966c5-2941-4ba5-9eb7-b761fd33f21b",
            "f6026fdb-1a41-419e-a38a-2ff32b7c8799"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5bb87619-ab08-481a-9244-35b373c91057",
          "title": "Testing UC5.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC5.1\"",
              "fullTitle": "Testing UC5.1 \"before all\" hook in \"Testing UC5.1\"",
              "timedOut": false,
              "duration": 164,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10.99, 1, 1, 1));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"itemId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);\nawait localDAO.editRestockOrderState(1, \"DELIVERY\");",
              "err": {},
              "uuid": "d3c85b62-0687-41b0-848b-35d2af9290ed",
              "parentUUID": "5bb87619-ab08-481a-9244-35b373c91057",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Changing restock order state",
              "fullTitle": "Testing UC5.1 Changing restock order state",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "76c87ce3-294a-41e0-954e-78867ddc21b4",
              "parentUUID": "5bb87619-ab08-481a-9244-35b373c91057",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding skuitems",
              "fullTitle": "Testing UC5.1 Adding skuitems",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/skuItems`).send({skuItems:skuItems}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        console.log(res2.body);\n        expect(res2.body.skuItems).to.deep.equalInAnyOrder(skuItems);\n        done();\n    });\n});",
              "err": {},
              "uuid": "d493bfbc-924d-4458-a891-5ae96e83518f",
              "parentUUID": "5bb87619-ab08-481a-9244-35b373c91057",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76c87ce3-294a-41e0-954e-78867ddc21b4",
            "d493bfbc-924d-4458-a891-5ae96e83518f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e17c1eb8-a210-4bb6-af87-8a499cfc5513",
          "title": "Testing UC5.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC5.2\"",
              "fullTitle": "Testing UC5.2 \"before all\" hook in \"Testing UC5.2\"",
              "timedOut": false,
              "duration": 180,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10.99, 1, 1, 1));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"itemId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);\nawait localDAO.editRestockOrderState(1, \"DELIVERED\");\nawait localDAO.editRestockOrderSkuItems(1, [{rfid : '12345678901234567890123456789015', SKUId : 1,\"itemId\":1}]);\nawait localDAO.addTestDescriptor(\"test descriptor 3\", \"This test is described by...\", 1);",
              "err": {},
              "uuid": "557c7f39-7cc5-4947-b41a-bb347edb39c3",
              "parentUUID": "e17c1eb8-a210-4bb6-af87-8a499cfc5513",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a test result to an SKU",
              "fullTitle": "Testing UC5.2 Adding a test result to an SKU",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.post('/api/skuitems/testResult').send({rfid:rfid, idTestDescriptor:idTestDescriptor, Date:Date, Result:Result}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "03279487-444a-4bab-b934-a1e674b99f8f",
              "parentUUID": "e17c1eb8-a210-4bb6-af87-8a499cfc5513",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Testing UC5.2 Changing restock order state",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "a1fd8de5-88fd-4098-927e-8a0d75d80be2",
              "parentUUID": "e17c1eb8-a210-4bb6-af87-8a499cfc5513",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "03279487-444a-4bab-b934-a1e674b99f8f",
            "a1fd8de5-88fd-4098-927e-8a0d75d80be2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7fe2125c-d7ca-4cbe-a0d0-0a25476e8914",
          "title": "Test ReturnOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/returnOrderRoute.js",
          "file": "/test/returnOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test ReturnOrder APIs\"",
              "fullTitle": "Test ReturnOrder APIs \"before all\" hook in \"Test ReturnOrder APIs\"",
              "timedOut": false,
              "duration": 167,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789016'));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789038'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10, 1, 1, 1));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);",
              "err": {},
              "uuid": "c7a4cb0e-845f-4da4-bd7d-15f487a48dbb",
              "parentUUID": "7fe2125c-d7ca-4cbe-a0d0-0a25476e8914",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new return order",
              "fullTitle": "Test ReturnOrder APIs Adding a new return order",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    returnDate : returnDate,\n    products : products,\n    restockOrderId : restockOrderId\n};\nagent.post('/api/returnOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "ac55d0c3-9660-4c4d-81f3-82ee644ffd8b",
              "parentUUID": "7fe2125c-d7ca-4cbe-a0d0-0a25476e8914",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all return orders",
              "fullTitle": "Test ReturnOrder APIs Getting all return orders",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/returnOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    console.log(res.body);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "19712c54-219e-4732-a5a0-2ffe52917093",
              "parentUUID": "7fe2125c-d7ca-4cbe-a0d0-0a25476e8914",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting return order by ID",
              "fullTitle": "Test ReturnOrder APIs Getting return order by ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/returnOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    console.log(res.body);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "12e1a7ab-2531-426a-9bbc-321d8300a636",
              "parentUUID": "7fe2125c-d7ca-4cbe-a0d0-0a25476e8914",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting return order",
              "fullTitle": "Test ReturnOrder APIs Deleting return order",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/returnOrder/${ID}`).then(res => {\n   done();\n});",
              "err": {},
              "uuid": "3309d8bd-028c-4397-99ce-233af65d63a5",
              "parentUUID": "7fe2125c-d7ca-4cbe-a0d0-0a25476e8914",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac55d0c3-9660-4c4d-81f3-82ee644ffd8b",
            "19712c54-219e-4732-a5a0-2ffe52917093",
            "12e1a7ab-2531-426a-9bbc-321d8300a636",
            "3309d8bd-028c-4397-99ce-233af65d63a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fa315022-c701-4511-8e0a-ad1805c4e9a9",
          "title": "Testing UC6",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/returnOrderRoute.js",
          "file": "/test/returnOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC6\"",
              "fullTitle": "Testing UC6 \"before all\" hook in \"Testing UC6\"",
              "timedOut": false,
              "duration": 160,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789016'));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789038'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10, 1, 1, 1));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);",
              "err": {},
              "uuid": "9fdd40aa-d96a-45e1-a0bd-f6e9900757a2",
              "parentUUID": "fa315022-c701-4511-8e0a-ad1805c4e9a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC6 Put inside sku",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "68a81f48-1965-43af-8ff0-8c5f0f04ddb3",
              "parentUUID": "fa315022-c701-4511-8e0a-ad1805c4e9a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new return order",
              "fullTitle": "Testing UC6 Adding a new return order",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    returnDate : returnDate,\n    products : products,\n    restockOrderId : restockOrderId\n};\nagent.post('/api/returnOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "9df2dc9e-85d3-4c2a-8496-07a780c2531c",
              "parentUUID": "fa315022-c701-4511-8e0a-ad1805c4e9a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC6 Put inside sku",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "68d8032f-5fc0-462e-ba44-1def30d5566a",
              "parentUUID": "fa315022-c701-4511-8e0a-ad1805c4e9a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku availability",
              "fullTitle": "Testing UC6 Getting sku availability",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expectedAvailable);\n    done();\n});",
              "err": {},
              "uuid": "ee1d0de9-c8fc-4650-bdbe-bee5e32a0c38",
              "parentUUID": "fa315022-c701-4511-8e0a-ad1805c4e9a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "68a81f48-1965-43af-8ff0-8c5f0f04ddb3",
            "9df2dc9e-85d3-4c2a-8496-07a780c2531c",
            "68d8032f-5fc0-462e-ba44-1def30d5566a",
            "ee1d0de9-c8fc-4650-bdbe-bee5e32a0c38"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b05b9ffe-44e3-4c5c-a46c-452702761226",
          "title": "Test TestDescriptor APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test TestDescriptor APIs\"",
              "fullTitle": "Test TestDescriptor APIs \"before all\" hook in \"Test TestDescriptor APIs\"",
              "timedOut": false,
              "duration": 147,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "79054a17-da6c-4269-ad9d-f25c81ce60e4",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "02581b99-a1f3-424e-b434-bb6cfd208f9d",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "5a5893f8-083f-448b-b754-c23b13b788ed",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "a7f837fe-6083-4600-a558-c8cb15935be2",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptors",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptors",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/testDescriptors').then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tdone();\n});",
              "err": {},
              "uuid": "ab80b8dc-f5d8-48b1-9b48-eb1f9ca1005c",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "0972a571-1688-4861-aeda-06afd0ffe166",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "fda0dcf1-220f-4f53-abdc-39bcc2fe9d60",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "7c8fb42a-00be-4052-9d1a-e7dc2bccdff0",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "bb446769-adaa-46de-954e-9cf28ddf9e6d",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "5ed325e0-463b-446d-8912-afe573da5393",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "d2168237-ed09-47e1-b423-346be8765fce",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "4d372036-fa0b-499d-bd0b-41126c578636",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete test descriptor",
              "fullTitle": "Test TestDescriptor APIs Delete test descriptor",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/testDescriptor/${testDescID}`).then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tagent.get(`/api/testDescriptor/${testDescID}`).then((res2) => {\n\t\texpect(res2.body).to.deep.equalInAnyOrder({});\n\t\tdone();\n\t});\n});",
              "err": {},
              "uuid": "c0f70457-b305-4ca1-8642-419ab950ad4a",
              "parentUUID": "b05b9ffe-44e3-4c5c-a46c-452702761226",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02581b99-a1f3-424e-b434-bb6cfd208f9d",
            "5a5893f8-083f-448b-b754-c23b13b788ed",
            "a7f837fe-6083-4600-a558-c8cb15935be2",
            "ab80b8dc-f5d8-48b1-9b48-eb1f9ca1005c",
            "0972a571-1688-4861-aeda-06afd0ffe166",
            "fda0dcf1-220f-4f53-abdc-39bcc2fe9d60",
            "7c8fb42a-00be-4052-9d1a-e7dc2bccdff0",
            "bb446769-adaa-46de-954e-9cf28ddf9e6d",
            "5ed325e0-463b-446d-8912-afe573da5393",
            "d2168237-ed09-47e1-b423-346be8765fce",
            "4d372036-fa0b-499d-bd0b-41126c578636",
            "c0f70457-b305-4ca1-8642-419ab950ad4a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "97c0bf28-2168-49c0-a525-b778bbc09ddf",
          "title": "Testing UC 12.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.1\"",
              "fullTitle": "Testing UC 12.1 \"before all\" hook in \"Testing UC 12.1\"",
              "timedOut": false,
              "duration": 144,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "42835dbd-0611-4371-8973-0dde3491b3d3",
              "parentUUID": "97c0bf28-2168-49c0-a525-b778bbc09ddf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.1 Adding a new test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "9563b02d-55c7-470b-982c-310aef49d2e2",
              "parentUUID": "97c0bf28-2168-49c0-a525-b778bbc09ddf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9563b02d-55c7-470b-982c-310aef49d2e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "62c1c0f0-3508-4095-ab67-bf90605d5210",
          "title": "Testing UC 12.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.2\"",
              "fullTitle": "Testing UC 12.2 \"before all\" hook in \"Testing UC 12.2\"",
              "timedOut": false,
              "duration": 148,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "bb37fc01-1789-4979-963b-6f4bacedb0ce",
              "parentUUID": "62c1c0f0-3508-4095-ab67-bf90605d5210",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.2 Adding a new test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "21c9a9d8-104e-41b0-9b4a-ff4052035f0e",
              "parentUUID": "62c1c0f0-3508-4095-ab67-bf90605d5210",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Testing UC 12.2 Put inside test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "81349ed8-c7f2-47a7-933c-3eaae3f75ac2",
              "parentUUID": "62c1c0f0-3508-4095-ab67-bf90605d5210",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21c9a9d8-104e-41b0-9b4a-ff4052035f0e",
            "81349ed8-c7f2-47a7-933c-3eaae3f75ac2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e7f9607b-4d24-4c34-9efa-a6278152a2f3",
          "title": "Testing UC 12.3",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.3\"",
              "fullTitle": "Testing UC 12.3 \"before all\" hook in \"Testing UC 12.3\"",
              "timedOut": false,
              "duration": 147,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "e0981bd1-b53a-4c0f-9aec-e735ddfba863",
              "parentUUID": "e7f9607b-4d24-4c34-9efa-a6278152a2f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.3 Adding a new test descriptor",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "ef6cc51e-175c-451d-b96d-9ab91e21f60a",
              "parentUUID": "e7f9607b-4d24-4c34-9efa-a6278152a2f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete test descriptor",
              "fullTitle": "Testing UC 12.3 Delete test descriptor",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/testDescriptor/${testDescID}`).then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tagent.get(`/api/testDescriptor/${testDescID}`).then((res2) => {\n\t\texpect(res2.body).to.deep.equalInAnyOrder({});\n\t\tdone();\n\t});\n});",
              "err": {},
              "uuid": "78ebebc8-bebd-42b2-a3f2-191a69710334",
              "parentUUID": "e7f9607b-4d24-4c34-9efa-a6278152a2f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef6cc51e-175c-451d-b96d-9ab91e21f60a",
            "78ebebc8-bebd-42b2-a3f2-191a69710334"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6da7ceb8-3085-4d66-854d-524f26519b66",
          "title": "Test test Result APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testResultRoute.js",
          "file": "/test/testResultRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test test Result APIs\"",
              "fullTitle": "Test test Result APIs \"before each\" hook in \"Test test Result APIs\"",
              "timedOut": false,
              "duration": 149,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(\n\tnew SKU('SKU1', 10, 10, 100, 'no notes', null, null, 20)\n);\nawait dao.addSKUItem(\n\tnew SKUItem(1, true, '24-05-2022', '12345678901234567890123456789012')\n);",
              "err": {},
              "uuid": "88747ed1-e355-409f-af59-7744561dc49e",
              "parentUUID": "6da7ceb8-3085-4d66-854d-524f26519b66",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "a2af723a-f9fd-4d0c-86c1-e8664d9e6c7a",
              "parentUUID": "6da7ceb8-3085-4d66-854d-524f26519b66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "8917f79d-2759-4351-b13b-d3fa88ae042e",
              "parentUUID": "6da7ceb8-3085-4d66-854d-524f26519b66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a2af723a-f9fd-4d0c-86c1-e8664d9e6c7a",
            "8917f79d-2759-4351-b13b-d3fa88ae042e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
          "title": "Test test Result APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testResultRoute.js",
          "file": "/test/testResultRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test test Result APIs\"",
              "fullTitle": "Test test Result APIs \"before each\" hook in \"Test test Result APIs\"",
              "timedOut": false,
              "duration": 172,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(\n\tnew SKU('SKU1', 10, 10, 100, 'no notes', null, null, 20)\n);\nawait dao.addSKUItem(\n\tnew SKUItem(1, true, '24-05-2022', '12345678901234567890123456789012')\n);\nawait dao.addTestDescriptor('TD1', 'Test description 1', 1);\nawait dao.addTestDescriptor('TD2', 'Test description 2', 1);\nawait dao.addTestResult(\n\t'12345678901234567890123456789012',\n\t1,\n\t'24-05-2022',\n\ttrue\n);\nawait dao.addTestResult(\n\t'12345678901234567890123456789012',\n\t2,\n\t'22-05-2022',\n\tfalse\n);",
              "err": {},
              "uuid": "8387cdef-5284-43e0-824c-953817a23cd5",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "ce4b7282-88d0-42c3-8d94-cfb7b5afa107",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "a473d9ee-1f0f-4578-9989-1b514f17dae2",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "df532695-180f-4483-b4b0-c74f614c7be2",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "c86e79e3-1c1a-4d2c-9952-6751ced5b350",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "b7cef82e-5ac0-4e3d-841a-0d03896d4c30",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "750a8712-9532-4772-aecd-b968a2cbd1bc",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "08ce52f7-7f90-472d-aa84-b83e22616f4a",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "e8cce574-7b26-4071-8bd3-e0b0cc1bebe1",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "0c8e2253-36f2-4cd6-b4d9-3958a84d26c2",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "303e0cf5-b5d8-4ce1-bf94-90e56d619ed7",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "0a5796b1-de8a-4cd7-8c79-ed3e1d45f68c",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete test result : DELETE /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs delete test result : DELETE /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "faeabf1e-335c-485b-a27c-8eecaa4bb017",
              "parentUUID": "9fb88b5a-9ad3-41c1-9143-828fa73767c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce4b7282-88d0-42c3-8d94-cfb7b5afa107",
            "a473d9ee-1f0f-4578-9989-1b514f17dae2",
            "df532695-180f-4483-b4b0-c74f614c7be2",
            "c86e79e3-1c1a-4d2c-9952-6751ced5b350",
            "b7cef82e-5ac0-4e3d-841a-0d03896d4c30",
            "750a8712-9532-4772-aecd-b968a2cbd1bc",
            "08ce52f7-7f90-472d-aa84-b83e22616f4a",
            "e8cce574-7b26-4071-8bd3-e0b0cc1bebe1",
            "0c8e2253-36f2-4cd6-b4d9-3958a84d26c2",
            "303e0cf5-b5d8-4ce1-bf94-90e56d619ed7",
            "0a5796b1-de8a-4cd7-8c79-ed3e1d45f68c",
            "faeabf1e-335c-485b-a27c-8eecaa4bb017"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "03ec84bd-319c-4813-adf1-38cd8840c45f",
          "title": "Test user APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/userRoute.js",
          "file": "/test/userRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test user APIs\"",
              "fullTitle": "Test user APIs \"before each\" hook in \"Test user APIs\"",
              "timedOut": false,
              "duration": 153,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.addUser(\n\tnew User('Ahmed', 'Khater', 'supplier', 's123456@mail.com', '12345678')\n);\nawait dao.addUser(\n\tnew User('Mohamed', 'Khater', 'customer', '127812@mail.com', '12345678')\n);\nawait dao.addUser(\n\tnew User('Eslam', 'Khater', 'manager', '987654321@mail.com', '12345678')\n);",
              "err": {},
              "uuid": "cd90d47c-ae6a-4f54-9978-197d0c4d1935",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "6670d275-50ad-466d-b805-257b0337a4e3",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "24ff73c3-a1d2-4a80-83d5-883bccc3e424",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "e1cfe4b1-b842-4e41-84b7-6ff7457778d8",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get users : GET /api/users",
              "fullTitle": "Test user APIs get users : GET /api/users",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/users')\n\t.then(function (res) {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "f36995bb-65b2-4ece-9b85-5bd73451f812",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting suppliers : GET /api/suppliers",
              "fullTitle": "Test user APIs Getting suppliers : GET /api/suppliers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/suppliers')\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "3ba23058-527f-4944-89d2-70cd8d60007b",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "984be21b-9c00-48dd-a12d-945f3a7ba61c",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "f9b5e3ec-e258-4615-91d0-990df47a6df4",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "0dd8d682-18fb-4684-8980-31aa03b35b49",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "02ccf751-3fd8-41e8-a535-4f4ecb9929ff",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "5315306a-6d2d-4dc4-bd38-c5d9d92f05d3",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "f685f10c-9e61-461b-b22b-16f7f682d261",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "16fa70f5-f88d-4d8f-9e88-f79690b50a9c",
              "parentUUID": "03ec84bd-319c-4813-adf1-38cd8840c45f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6670d275-50ad-466d-b805-257b0337a4e3",
            "24ff73c3-a1d2-4a80-83d5-883bccc3e424",
            "e1cfe4b1-b842-4e41-84b7-6ff7457778d8",
            "f36995bb-65b2-4ece-9b85-5bd73451f812",
            "3ba23058-527f-4944-89d2-70cd8d60007b",
            "984be21b-9c00-48dd-a12d-945f3a7ba61c",
            "f9b5e3ec-e258-4615-91d0-990df47a6df4",
            "0dd8d682-18fb-4684-8980-31aa03b35b49",
            "02ccf751-3fd8-41e8-a535-4f4ecb9929ff",
            "5315306a-6d2d-4dc4-bd38-c5d9d92f05d3",
            "f685f10c-9e61-461b-b22b-16f7f682d261",
            "16fa70f5-f88d-4d8f-9e88-f79690b50a9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}