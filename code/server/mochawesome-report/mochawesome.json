{
  "stats": {
    "suites": 25,
    "tests": 117,
    "passes": 113,
    "pending": 0,
    "failures": 4,
    "start": "2022-06-06T20:09:42.690Z",
    "end": "2022-06-06T20:10:12.975Z",
    "duration": 30285,
    "testsRegistered": 117,
    "passPercent": 96.58119658119658,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "17ea042c-4922-40cf-878b-16e60c81c45a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
          "title": "Test SKUItem APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKUItemRoute.js",
          "file": "/test/SKUItemRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test SKUItem APIs\"",
              "fullTitle": "Test SKUItem APIs \"before all\" hook in \"Test SKUItem APIs\"",
              "timedOut": false,
              "duration": 135,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));",
              "err": {},
              "uuid": "a1e7f5ad-eef2-417e-96a9-e423c310b886",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKUItem",
              "fullTitle": "Test SKUItem APIs Adding a new SKUItem",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    \"RFID\" : RFID,\n    \"SKUId\" : SKUId,\n    \"DateOfStock\" : DateOfStock\n};\nagent.post('/api/skuitem').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "b1c40ebb-af20-485c-8e00-78c8629e4638",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new SKUItem",
              "fullTitle": "Test SKUItem APIs Adding a new SKUItem",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    \"RFID\" : RFID,\n    \"SKUId\" : SKUId,\n    \"DateOfStock\" : DateOfStock\n};\nagent.post('/api/skuitem').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "98705f91-3fe1-4124-b674-bf22a69d0cd5",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku items",
              "fullTitle": "Test SKUItem APIs Getting sku items",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/skuitems').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "ef1d46c6-1ee1-42a9-bd88-96b7863665c3",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Test SKUItem APIs Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "e23badb3-19c9-470f-a541-071864c1edaa",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "3f287867-7ca4-4218-827d-ef4e0c406a2c",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "98276b8d-985a-456f-bcb5-df65482cd66b",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKUItem APIs Put inside sku",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "f670a7ae-fe4d-46b0-9ab9-be2d9d98b134",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete sku",
              "fullTitle": "Test SKUItem APIs Delete sku",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/skuitems/${rfid}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/skuitems/${rfid}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "5810f0d5-80ca-4c6e-9671-7a3aff2d8638",
              "parentUUID": "4534ccb8-f1fa-4746-b543-1267ce433bfd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1c40ebb-af20-485c-8e00-78c8629e4638",
            "98705f91-3fe1-4124-b674-bf22a69d0cd5",
            "ef1d46c6-1ee1-42a9-bd88-96b7863665c3",
            "e23badb3-19c9-470f-a541-071864c1edaa",
            "3f287867-7ca4-4218-827d-ef4e0c406a2c",
            "98276b8d-985a-456f-bcb5-df65482cd66b",
            "f670a7ae-fe4d-46b0-9ab9-be2d9d98b134",
            "5810f0d5-80ca-4c6e-9671-7a3aff2d8638"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
          "title": "Test SKU APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test SKU APIs\"",
              "fullTitle": "Test SKU APIs \"before each\" hook in \"Test SKU APIs\"",
              "timedOut": false,
              "duration": 148,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 1, 1, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "2c480f42-0d05-4a93-86f2-2717c3ac710a",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKU",
              "fullTitle": "Test SKU APIs Adding a new SKU",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "b82e32a2-1179-43c6-b6db-d4ee940df0fa",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new SKU",
              "fullTitle": "Test SKU APIs Adding a new SKU",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "50703cc0-fde4-495a-85b7-dba13b9c5f84",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting skus",
              "fullTitle": "Test SKU APIs Getting skus",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/skus').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "92d99d75-507b-4e9c-8056-317ee4259e47",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Test SKU APIs Getting sku",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "9bbc007d-8f04-4736-9000-ee9dc4d69049",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "298f2e5b-1206-41c1-b0d4-e46d5b86d7f1",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "3df620bb-ed1c-43dd-918b-72ddc75dc133",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Test SKU APIs Put inside sku",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "18c80b65-249a-4dd8-b837-7b868b3dc26f",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put SKU position",
              "fullTitle": "Test SKU APIs Put SKU position",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}/position`).send({\n    position : position\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "4e949bda-6a48-4e69-9f70-d273cc4b4c20",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete sku",
              "fullTitle": "Test SKU APIs Delete sku",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/skus/${id}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/sku/${id}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "7a8da120-a2a8-445d-ad43-47cf974e8b6b",
              "parentUUID": "276bd98a-cdf5-4c26-9b4e-34f5c3050a38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b82e32a2-1179-43c6-b6db-d4ee940df0fa",
            "50703cc0-fde4-495a-85b7-dba13b9c5f84",
            "92d99d75-507b-4e9c-8056-317ee4259e47",
            "9bbc007d-8f04-4736-9000-ee9dc4d69049",
            "298f2e5b-1206-41c1-b0d4-e46d5b86d7f1",
            "3df620bb-ed1c-43dd-918b-72ddc75dc133",
            "18c80b65-249a-4dd8-b837-7b868b3dc26f",
            "4e949bda-6a48-4e69-9f70-d273cc4b4c20",
            "7a8da120-a2a8-445d-ad43-47cf974e8b6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 131,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0ea7b141-bfdb-4b31-8c68-363e92c1856e",
          "title": "Testing UC 1.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.1\"",
              "fullTitle": "Testing UC 1.1 \"before all\" hook in \"Testing UC 1.1\"",
              "timedOut": false,
              "duration": 136,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');",
              "err": {},
              "uuid": "1354383f-ee2b-4c52-9eaf-6b179d9368e3",
              "parentUUID": "0ea7b141-bfdb-4b31-8c68-363e92c1856e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new SKU",
              "fullTitle": "Testing UC 1.1 Adding a new SKU",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    description : description,\n    weight : weight,\n    volume : volume,\n    notes : notes,\n    price : price,\n    availableQuantity : availableQuantity\n};\nagent.post('/api/sku').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "a7643c49-dfb2-4a5f-a5c5-8ac35a839ad5",
              "parentUUID": "0ea7b141-bfdb-4b31-8c68-363e92c1856e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7643c49-dfb2-4a5f-a5c5-8ac35a839ad5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "20698c60-a1c4-42ac-8978-488899fe49cd",
          "title": "Testing UC 1.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.2\"",
              "fullTitle": "Testing UC 1.2 \"before all\" hook in \"Testing UC 1.2\"",
              "timedOut": false,
              "duration": 146,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 1, 1, 10, \"first SKU\", null, null, 50));\nawait localDAO.addPosition(\"800234543413\", \"8002\", \"3454\", \"3413\", 1000, 1000);",
              "err": {},
              "uuid": "d517a4f4-7dd5-4f78-b273-219b5fa13104",
              "parentUUID": "20698c60-a1c4-42ac-8978-488899fe49cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put SKU position",
              "fullTitle": "Testing UC 1.2 Put SKU position",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}/position`).send({\n    position : position\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "95f26920-ebe7-4e85-918e-20c663f1f315",
              "parentUUID": "20698c60-a1c4-42ac-8978-488899fe49cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Testing UC 1.2 Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "ef1f1d1c-b166-4542-9646-506eaaa02d20",
              "parentUUID": "20698c60-a1c4-42ac-8978-488899fe49cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95f26920-ebe7-4e85-918e-20c663f1f315",
            "ef1f1d1c-b166-4542-9646-506eaaa02d20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2b18f8bf-fa0b-447e-bdd8-b14cf247b924",
          "title": "Testing UC 1.3",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/SKURoute.js",
          "file": "/test/SKURoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 1.3\"",
              "fullTitle": "Testing UC 1.3 \"before all\" hook in \"Testing UC 1.3\"",
              "timedOut": false,
              "duration": 145,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10, \"first SKU\", null, null, 50));",
              "err": {},
              "uuid": "22bda132-af00-463b-961c-20facb2bfa48",
              "parentUUID": "2b18f8bf-fa0b-447e-bdd8-b14cf247b924",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC 1.3 Put inside sku",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/sku/${ID}`).send({\n    newDescription: newDescription, \n    newWeight: newWeight, \n    newVolume: newVolume, \n    newNotes: newNotes, \n    newPrice:newPrice , \n    newAvailableQuantity:newAvailableQuantity\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "04903b1c-67c7-4809-acc7-4c638efdc10b",
              "parentUUID": "2b18f8bf-fa0b-447e-bdd8-b14cf247b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku",
              "fullTitle": "Testing UC 1.3 Getting sku",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skus/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "8fc86156-a350-4828-964e-21f42915c8cf",
              "parentUUID": "2b18f8bf-fa0b-447e-bdd8-b14cf247b924",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04903b1c-67c7-4809-acc7-4c638efdc10b",
            "8fc86156-a350-4828-964e-21f42915c8cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "322aec94-1226-4fc8-b9c5-27dff2e3876c",
          "title": "Test InternalOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test InternalOrder APIs\"",
              "fullTitle": "Test InternalOrder APIs \"before all\" hook in \"Test InternalOrder APIs\"",
              "timedOut": false,
              "duration": 148,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));",
              "err": {},
              "uuid": "39a10aec-4fa5-458e-9a29-93ad6ee49c7b",
              "parentUUID": "322aec94-1226-4fc8-b9c5-27dff2e3876c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new internal order",
              "fullTitle": "Test InternalOrder APIs Adding a new internal order",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    customerId : customerId\n};\nagent.post('/api/internalOrders').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "6a4d5698-4801-40b8-ad1c-184f9e334450",
              "parentUUID": "322aec94-1226-4fc8-b9c5-27dff2e3876c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all internal orders",
              "fullTitle": "Test InternalOrder APIs Getting all internal orders",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/internalOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "ae446b92-6945-46cc-9f01-480315a8ab04",
              "parentUUID": "322aec94-1226-4fc8-b9c5-27dff2e3876c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all internal orders issued",
              "fullTitle": "Test InternalOrder APIs Getting all internal orders issued",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/internalOrdersIssued').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "7ac55278-6f28-476e-91e3-622048dcbdcf",
              "parentUUID": "322aec94-1226-4fc8-b9c5-27dff2e3876c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Test InternalOrder APIs Changing internal order state",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "698c5d14-c7be-4ae3-af2d-912ec80b32af",
              "parentUUID": "322aec94-1226-4fc8-b9c5-27dff2e3876c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Test InternalOrder APIs Changing internal order state",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "e587997d-1730-4dd7-a50b-2b38002ece9f",
              "parentUUID": "322aec94-1226-4fc8-b9c5-27dff2e3876c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting an internal order",
              "fullTitle": "Test InternalOrder APIs Deleting an internal order",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/internalOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    });\n})",
              "err": {},
              "uuid": "8137ed5f-8f8c-4cd8-91a9-fbcbd6192fe3",
              "parentUUID": "322aec94-1226-4fc8-b9c5-27dff2e3876c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a4d5698-4801-40b8-ad1c-184f9e334450",
            "ae446b92-6945-46cc-9f01-480315a8ab04",
            "7ac55278-6f28-476e-91e3-622048dcbdcf",
            "698c5d14-c7be-4ae3-af2d-912ec80b32af",
            "e587997d-1730-4dd7-a50b-2b38002ece9f",
            "8137ed5f-8f8c-4cd8-91a9-fbcbd6192fe3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7a440e5d-d56d-46b0-9897-5b8bcfdfeeb8",
          "title": "Testing UC9",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC9\"",
              "fullTitle": "Testing UC9 \"before all\" hook in \"Testing UC9\"",
              "timedOut": false,
              "duration": 152,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));",
              "err": {},
              "uuid": "c88d2a59-7a94-4fe0-8e95-93d960e71411",
              "parentUUID": "7a440e5d-d56d-46b0-9897-5b8bcfdfeeb8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new internal order",
              "fullTitle": "Testing UC9 Adding a new internal order",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    customerId : customerId\n};\nagent.post('/api/internalOrders').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "667ec4c2-e958-4dd4-91a2-0677914b3717",
              "parentUUID": "7a440e5d-d56d-46b0-9897-5b8bcfdfeeb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing internal order state",
              "fullTitle": "Testing UC9 Changing internal order state",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "58993733-5e0d-495a-a29d-9d1b350ed793",
              "parentUUID": "7a440e5d-d56d-46b0-9897-5b8bcfdfeeb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "667ec4c2-e958-4dd4-91a2-0677914b3717",
            "58993733-5e0d-495a-a29d-9d1b350ed793"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6b3570c9-b52e-4cef-ba5e-3cbc4ea38b64",
          "title": "Testing UC10",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/internalOrderRoute.js",
          "file": "/test/internalOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC10\"",
              "fullTitle": "Testing UC10 \"before all\" hook in \"Testing UC10\"",
              "timedOut": false,
              "duration": 170,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addInternalOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"description\":\"a product\",\"price\":10.99,\"qty\":3}], 1);\nawait localDAO.editInternalOrder(1, \"ACCEPTED\");",
              "err": {},
              "uuid": "6b813e1c-9041-4ca8-b99e-c39ed5894c29",
              "parentUUID": "6b3570c9-b52e-4cef-ba5e-3cbc4ea38b64",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Changing internal order state",
              "fullTitle": "Testing UC10 Changing internal order state",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/internalOrders/${ID}`).send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/internalOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder(expected);\n        done();\n    });\n});",
              "err": {},
              "uuid": "5fd2bb91-919c-41da-a238-8c943e5de842",
              "parentUUID": "6b3570c9-b52e-4cef-ba5e-3cbc4ea38b64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku availability",
              "fullTitle": "Testing UC10 Getting sku availability",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    res.body.Available.should.equal(expectedAvailable);\n    done();\n});",
              "err": {},
              "uuid": "77d63660-6652-4cca-bc11-61b65c006178",
              "parentUUID": "6b3570c9-b52e-4cef-ba5e-3cbc4ea38b64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5fd2bb91-919c-41da-a238-8c943e5de842",
            "77d63660-6652-4cca-bc11-61b65c006178"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4d71faec-b554-4179-b7d5-f789a03e09b7",
          "title": "Test item APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/itemRoute.js",
          "file": "/test/itemRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test item APIs\"",
              "fullTitle": "Test item APIs \"before each\" hook in \"Test item APIs\"",
              "timedOut": false,
              "duration": 163,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(new SKU('sku 1', 10, 10, 100, null, null, 1, 20));\nawait dao.insertSKU(new SKU('sku 2', 10, 10, 100, null, null, 2, 20));\nawait dao.addItem(new Item('a new item', 10.99, 2, 1, 1));\nawait dao.addItem(new Item('another item', 12.99, 1, 2, 2));",
              "err": {},
              "uuid": "8d48e7cf-7a15-4e23-b79c-b3cf61b9e9db",
              "parentUUID": "4d71faec-b554-4179-b7d5-f789a03e09b7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "add item : POST /api/item",
              "fullTitle": "Test item APIs add item : POST /api/item",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n\tid: id,\n\tdescription: description,\n\tprice: price,\n\tsupplierId: supplierId,\n\tSKUId: SKUId,\n};\nagent\n\t.post('/api/item')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "5003b8ba-ffa8-4d3c-85f4-1b4ce1d9a547",
              "parentUUID": "4d71faec-b554-4179-b7d5-f789a03e09b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get items : GET /api/items",
              "fullTitle": "Test item APIs get items : GET /api/items",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/items')\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "a87295de-3863-43c7-8885-bccc771d1572",
              "parentUUID": "4d71faec-b554-4179-b7d5-f789a03e09b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getItembyId : GET /api/items/:id",
              "fullTitle": "Test item APIs getItembyId : GET /api/items/:id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/items/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "9f71cd55-d8cd-44e0-8a0e-3679c1ca3d29",
              "parentUUID": "4d71faec-b554-4179-b7d5-f789a03e09b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getItembyId : GET /api/items/:id",
              "fullTitle": "Test item APIs getItembyId : GET /api/items/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/items/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "911ad1ca-aa86-476e-8125-51c792526f40",
              "parentUUID": "4d71faec-b554-4179-b7d5-f789a03e09b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "editItem : PUT /api/item/:id",
              "fullTitle": "Test item APIs editItem : PUT /api/item/:id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/item/${id}`)\n\t.send({\n\t\tnewDescription: newDescription,\n\t\tnewPrice: newPrice,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "fc135027-a6bc-4716-911f-cdbccc08ae78",
              "parentUUID": "4d71faec-b554-4179-b7d5-f789a03e09b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteItemById : DELETE /api/items/:id",
              "fullTitle": "Test item APIs deleteItemById : DELETE /api/items/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/items/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "e1b9953b-e266-4177-938a-633cdcf5edc3",
              "parentUUID": "4d71faec-b554-4179-b7d5-f789a03e09b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5003b8ba-ffa8-4d3c-85f4-1b4ce1d9a547",
            "a87295de-3863-43c7-8885-bccc771d1572",
            "9f71cd55-d8cd-44e0-8a0e-3679c1ca3d29",
            "911ad1ca-aa86-476e-8125-51c792526f40",
            "fc135027-a6bc-4716-911f-cdbccc08ae78",
            "e1b9953b-e266-4177-938a-633cdcf5edc3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b137318a-7666-49a9-848e-22ae1f5ee87c",
          "title": "Test Position APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test Position APIs\"",
              "fullTitle": "Test Position APIs \"before all\" hook in \"Test Position APIs\"",
              "timedOut": false,
              "duration": 148,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resetDB('./EZWarehouseDB.db');",
              "err": {},
              "uuid": "f13ccdc0-faf9-4b6a-89d8-6eaa1633aece",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new position",
              "fullTitle": "Test Position APIs Adding a new position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const position = {\n    \"positionID\" : positionID,\n    \"aisleID\" : aisleID,\n    \"row\" : row,\n    \"col\" : col,\n    \"maxWeight\" : maxWeight,\n    \"maxVolume\" : maxVolume\n};\nagent.post('/api/position').send(position).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "a0b43f0c-b96b-4a16-a4aa-36d5853fd529",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new position",
              "fullTitle": "Test Position APIs Adding a new position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const position = {\n    \"positionID\" : positionID,\n    \"aisleID\" : aisleID,\n    \"row\" : row,\n    \"col\" : col,\n    \"maxWeight\" : maxWeight,\n    \"maxVolume\" : maxVolume\n};\nagent.post('/api/position').send(position).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "e4ff6fc8-3c42-49d1-b49f-9562855fa475",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting positions",
              "fullTitle": "Test Position APIs Getting positions",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/positions').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.not.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "2746d180-9e8c-4ca3-9d8b-5e89cbf6bc0f",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "54a54226-392c-46d9-bb33-999ccde65b23",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "a86353ed-cab6-4f84-b5e0-32b869b87437",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside position",
              "fullTitle": "Test Position APIs Put inside position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "24a673e6-6593-49d9-a96b-7e7346722369",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "e5079876-8004-4661-86bf-387159ffb9c6",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "3a234ee5-2f21-4530-8b96-4407f1252a11",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put new positionID into position",
              "fullTitle": "Test Position APIs Put new positionID into position",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "51ff4e90-9dc5-47ad-8aa4-2aa06cc77534",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete position by positionID",
              "fullTitle": "Test Position APIs Delete position by positionID",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/position/${posID}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/position/${posID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "9bfb0091-f170-48ea-9014-48cd8bae4ee7",
              "parentUUID": "b137318a-7666-49a9-848e-22ae1f5ee87c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0b43f0c-b96b-4a16-a4aa-36d5853fd529",
            "e4ff6fc8-3c42-49d1-b49f-9562855fa475",
            "2746d180-9e8c-4ca3-9d8b-5e89cbf6bc0f",
            "54a54226-392c-46d9-bb33-999ccde65b23",
            "a86353ed-cab6-4f84-b5e0-32b869b87437",
            "24a673e6-6593-49d9-a96b-7e7346722369",
            "e5079876-8004-4661-86bf-387159ffb9c6",
            "3a234ee5-2f21-4530-8b96-4407f1252a11",
            "51ff4e90-9dc5-47ad-8aa4-2aa06cc77534",
            "9bfb0091-f170-48ea-9014-48cd8bae4ee7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "86b97190-9228-4993-aa5f-fcb77f982d78",
          "title": "Testing UC 2.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.2\"",
              "fullTitle": "Testing UC 2.2 \"before all\" hook in \"Testing UC 2.2\"",
              "timedOut": false,
              "duration": 157,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "f13e98bb-a9da-42d3-9ae3-13b2fd37bf44",
              "parentUUID": "86b97190-9228-4993-aa5f-fcb77f982d78",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put new positionID into position",
              "fullTitle": "Testing UC 2.2 Put new positionID into position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}/changeID`).send({\n    newPositionID:newPositionID\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n})",
              "err": {},
              "uuid": "e08224ec-cb3c-430e-97dd-86db8a66b1ae",
              "parentUUID": "86b97190-9228-4993-aa5f-fcb77f982d78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e08224ec-cb3c-430e-97dd-86db8a66b1ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9400b65f-2ba6-4841-83d3-f33f8cc13708",
          "title": "Testing UC 2.3 and 2.4",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.3 and 2.4\"",
              "fullTitle": "Testing UC 2.3 and 2.4 \"before all\" hook in \"Testing UC 2.3 and 2.4\"",
              "timedOut": false,
              "duration": 147,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "35eae11d-433a-4342-b734-68df19048f7f",
              "parentUUID": "9400b65f-2ba6-4841-83d3-f33f8cc13708",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside position",
              "fullTitle": "Testing UC 2.3 and 2.4 Put inside position",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/position/${posID}`).send({\n    newAisleID:newAisleID,\n    newRow:newRow,\n    newCol:newCol,\n    newMaxWeight:newMaxWeight,\n    newMaxVolume:newMaxVolume,\n    newOccupiedWeight:newOccupiedWeight,\n    newOccupiedVolume:newOccupiedVolume\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "749d9d03-b44e-4849-a9f0-727a93692621",
              "parentUUID": "9400b65f-2ba6-4841-83d3-f33f8cc13708",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "749d9d03-b44e-4849-a9f0-727a93692621"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5ce3be14-6294-4ac4-a698-5303269fcff3",
          "title": "Testing UC 2.5",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/positionRoute.js",
          "file": "/test/positionRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 2.5\"",
              "fullTitle": "Testing UC 2.5 \"before all\" hook in \"Testing UC 2.5\"",
              "timedOut": false,
              "duration": 148,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.addPosition(\"800234543412\", \"8002\", \"3454\", \"3412\", 1000, 1000);",
              "err": {},
              "uuid": "c56a6ef7-96fd-41b2-89bb-471a54d63a5f",
              "parentUUID": "5ce3be14-6294-4ac4-a698-5303269fcff3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete position by positionID",
              "fullTitle": "Testing UC 2.5 Delete position by positionID",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/position/${posID}`).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/position/${posID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "7d3d376d-786e-4f47-b15a-4bbbc21f1893",
              "parentUUID": "5ce3be14-6294-4ac4-a698-5303269fcff3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d3d376d-786e-4f47-b15a-4bbbc21f1893"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
          "title": "Test RestockOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test RestockOrder APIs\"",
              "fullTitle": "Test RestockOrder APIs \"before all\" hook in \"Test RestockOrder APIs\"",
              "timedOut": false,
              "duration": 158,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10.99, 1, 1, 12));\nawait localDAO.addTestDescriptor(\"test descriptor 3\", \"This test is described by...\", 1);\nawait localDAO.addTestResult(\"12345678901234567890123456789015\", 1, \"2021/11/28\", false);",
              "err": {},
              "uuid": "30060a28-6d07-4c56-815a-82d6adbcb173",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new restock order",
              "fullTitle": "Test RestockOrder APIs Adding a new restock order",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    issueDate : issueDate,\n    products : products,\n    supplierId : supplierId\n};\nagent.post('/api/restockOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "432ddddd-864b-4d7f-ab1b-39708b3ed640",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all restock orders",
              "fullTitle": "Test RestockOrder APIs Getting all restock orders",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/restockOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "5cf810a6-40d9-495b-b649-8801000bbe01",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all restock orders issued",
              "fullTitle": "Test RestockOrder APIs Getting all restock orders issued",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/restockOrdersIssued').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "2c28f7d5-3759-4485-a426-34d1d8c751a5",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting restock order by ID",
              "fullTitle": "Test RestockOrder APIs Getting restock order by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "34883879-3187-4445-8ad2-bd649cbb8381",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "429b5b0e-1c1d-469d-9dd3-d6d30b5315b8",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a transport note",
              "fullTitle": "Test RestockOrder APIs Adding a transport note",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/transportNote`).send(tNote).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.transportNote.deliveryDate.should.equal(tNote.transportNote.deliveryDate);\n        done();\n    });\n});",
              "err": {},
              "uuid": "7b5e9c96-31a0-4744-8051-238fc8f1ec3c",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "0e1c579c-34f2-4e71-8e8d-c64cbe58795f",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding skuitems",
              "fullTitle": "Test RestockOrder APIs Adding skuitems",
              "timedOut": true,
              "duration": 5001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/skuItems`).send({skuItems:skuItems}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        expect(res2.body.skuItems).to.deep.equalInAnyOrder(skuItems);\n        done();\n    });\n});",
              "err": {
                "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js)",
                "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "83317e85-920c-461e-bb83-f5f0f1bf803f",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Test RestockOrder APIs Changing restock order state",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "3ad8084d-6bfb-4fc6-aedf-ddfe1d617e5c",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieving return items",
              "fullTitle": "Test RestockOrder APIs Retrieving return items",
              "timedOut": true,
              "duration": 5003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/restockOrders/${ID}/returnItems`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {
                "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js)",
                "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "07610880-40c8-4566-9419-8394c23e98d3",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting restock order",
              "fullTitle": "Test RestockOrder APIs Deleting restock order",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/restockOrder/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        expect(res2.body).to.deep.equalInAnyOrder({});\n        done();\n    })\n});",
              "err": {},
              "uuid": "5e239cc8-3290-4193-b2ed-e1c0fb4867ab",
              "parentUUID": "0409ffcb-6b5d-4b42-b9f4-9b29036594b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "432ddddd-864b-4d7f-ab1b-39708b3ed640",
            "5cf810a6-40d9-495b-b649-8801000bbe01",
            "2c28f7d5-3759-4485-a426-34d1d8c751a5",
            "34883879-3187-4445-8ad2-bd649cbb8381",
            "429b5b0e-1c1d-469d-9dd3-d6d30b5315b8",
            "7b5e9c96-31a0-4744-8051-238fc8f1ec3c",
            "0e1c579c-34f2-4e71-8e8d-c64cbe58795f",
            "3ad8084d-6bfb-4fc6-aedf-ddfe1d617e5c",
            "5e239cc8-3290-4193-b2ed-e1c0fb4867ab"
          ],
          "failures": [
            "83317e85-920c-461e-bb83-f5f0f1bf803f",
            "07610880-40c8-4566-9419-8394c23e98d3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10097,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1642066c-c1b5-40fb-85ca-fe5b5f5ae12c",
          "title": "Testing UC5.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC5.1\"",
              "fullTitle": "Testing UC5.1 \"before all\" hook in \"Testing UC5.1\"",
              "timedOut": false,
              "duration": 152,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10.99, 1, 1, 12));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);\nawait localDAO.editRestockOrderState(1, \"DELIVERY\");",
              "err": {},
              "uuid": "3f7dc95f-0361-4a42-bb4b-849b5194f2c1",
              "parentUUID": "1642066c-c1b5-40fb-85ca-fe5b5f5ae12c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Changing restock order state",
              "fullTitle": "Testing UC5.1 Changing restock order state",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "de6a135b-72c4-4b04-abe1-c1d9480fd4d1",
              "parentUUID": "1642066c-c1b5-40fb-85ca-fe5b5f5ae12c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding skuitems",
              "fullTitle": "Testing UC5.1 Adding skuitems",
              "timedOut": true,
              "duration": 5003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}/skuItems`).send({skuItems:skuItems}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        expect(res2.body.skuItems).to.deep.equalInAnyOrder(skuItems);\n        done();\n    });\n});",
              "err": {
                "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js)",
                "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "0b1fb2ab-59f8-4bf6-8c62-69ef9cb53a98",
              "parentUUID": "1642066c-c1b5-40fb-85ca-fe5b5f5ae12c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de6a135b-72c4-4b04-abe1-c1d9480fd4d1"
          ],
          "failures": [
            "0b1fb2ab-59f8-4bf6-8c62-69ef9cb53a98"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5011,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "66c2ba76-4f59-47bd-9a7d-226b4350f03c",
          "title": "Testing UC5.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js",
          "file": "/test/restockOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC5.2\"",
              "fullTitle": "Testing UC5.2 \"before all\" hook in \"Testing UC5.2\"",
              "timedOut": false,
              "duration": 183,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'supplier', 's295316@studenti.polito.it', 'testPassword'));\nawait localDAO.addItem(new Item(\"a new item\", 10.99, 1, 1, 12));\nawait localDAO.addRestockOrder(\"2021/11/29 09:33\", [{\"SKUId\":1,\"description\":\"a new item\",\"price\":10.99,\"qty\":30}], 1);\nawait localDAO.editRestockOrderState(1, \"DELIVERED\");\nawait localDAO.editRestockOrderSkuItems(1, [{rfid : '12345678901234567890123456789015', SKUId : 1}]);\nawait localDAO.addTestDescriptor(\"test descriptor 3\", \"This test is described by...\", 1);",
              "err": {},
              "uuid": "fbb9d359-c3eb-4375-aea0-95070ba227f6",
              "parentUUID": "66c2ba76-4f59-47bd-9a7d-226b4350f03c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a test result to an SKU",
              "fullTitle": "Testing UC5.2 Adding a test result to an SKU",
              "timedOut": true,
              "duration": 5004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "agent.post('/api/skuitems/testResult').send({rfid:rfid, idTestDescriptor:idTestDescriptor, Date:Date, Result:Result}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {
                "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js)",
                "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/restockOrderRoute.js)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "a7c87d56-f6f1-4254-9ee3-6c2353a1d004",
              "parentUUID": "66c2ba76-4f59-47bd-9a7d-226b4350f03c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Changing restock order state",
              "fullTitle": "Testing UC5.2 Changing restock order state",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/restockOrder/${ID}`).send({newState : state}).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    agent.get(`/api/restockOrders/${ID}`).then(res2 => {\n        res2.body.state.should.equal(state);\n        done();\n    });\n});",
              "err": {},
              "uuid": "5c634f72-d410-45ed-b139-c25d658a81d0",
              "parentUUID": "66c2ba76-4f59-47bd-9a7d-226b4350f03c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c634f72-d410-45ed-b139-c25d658a81d0"
          ],
          "failures": [
            "a7c87d56-f6f1-4254-9ee3-6c2353a1d004"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5017,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bbf5eb7c-2cff-481e-a81c-009bf73e482a",
          "title": "Test ReturnOrder APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/returnOrderRoute.js",
          "file": "/test/returnOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test ReturnOrder APIs\"",
              "fullTitle": "Test ReturnOrder APIs \"before all\" hook in \"Test ReturnOrder APIs\"",
              "timedOut": false,
              "duration": 139,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789016'));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789038'));",
              "err": {},
              "uuid": "5bf3811f-b8e7-44e5-9584-4a3ac3feda41",
              "parentUUID": "bbf5eb7c-2cff-481e-a81c-009bf73e482a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new return order",
              "fullTitle": "Test ReturnOrder APIs Adding a new return order",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    returnDate : returnDate,\n    products : products,\n    restockOrderId : restockOrderId\n};\nagent.post('/api/returnOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "4cf9eaae-8d62-49cf-b41d-d87ffab319ff",
              "parentUUID": "bbf5eb7c-2cff-481e-a81c-009bf73e482a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting all return orders",
              "fullTitle": "Test ReturnOrder APIs Getting all return orders",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/returnOrders').then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "dd65452d-4b3a-4dae-a8de-a33ff75f4186",
              "parentUUID": "bbf5eb7c-2cff-481e-a81c-009bf73e482a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting return order by ID",
              "fullTitle": "Test ReturnOrder APIs Getting return order by ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/returnOrders/${ID}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    console.log(res.body);\n    expect(res.body).to.deep.equalInAnyOrder(expected);\n    done();\n});",
              "err": {},
              "uuid": "b1bf096a-30f9-455c-96ca-c75ecadc1134",
              "parentUUID": "bbf5eb7c-2cff-481e-a81c-009bf73e482a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deleting return order",
              "fullTitle": "Test ReturnOrder APIs Deleting return order",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/returnOrder/${ID}`).then(res => {\n   done();\n});",
              "err": {},
              "uuid": "49687800-459d-4222-a0a8-b1613f222af3",
              "parentUUID": "bbf5eb7c-2cff-481e-a81c-009bf73e482a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4cf9eaae-8d62-49cf-b41d-d87ffab319ff",
            "dd65452d-4b3a-4dae-a8de-a33ff75f4186",
            "b1bf096a-30f9-455c-96ca-c75ecadc1134",
            "49687800-459d-4222-a0a8-b1613f222af3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9123ff64-888b-46df-a7c0-b3ef08f4f9d7",
          "title": "Testing UC6",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/returnOrderRoute.js",
          "file": "/test/returnOrderRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC6\"",
              "fullTitle": "Testing UC6 \"before all\" hook in \"Testing UC6\"",
              "timedOut": false,
              "duration": 159,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(new SKU(\"a new sku\", 100, 50, 10.99, \"first SKU\", null, null, 50));\nawait localDAO.addSKUItem(new SKUItem(1, 1, \"2021/11/29 12:30\", '12345678901234567890123456789015'));\nawait localDAO.addUser(new User('Simone', 'Zanella', 'customer', 's295316@studenti.polito.it', 'testPassword'));",
              "err": {},
              "uuid": "d82af7bd-335d-4f85-b452-aeab17c43923",
              "parentUUID": "9123ff64-888b-46df-a7c0-b3ef08f4f9d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC6 Put inside sku",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "a8af50ea-d2bb-4969-a7f9-fe5605a92567",
              "parentUUID": "9123ff64-888b-46df-a7c0-b3ef08f4f9d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new return order",
              "fullTitle": "Testing UC6 Adding a new return order",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBody = {\n    returnDate : returnDate,\n    products : products,\n    restockOrderId : restockOrderId\n};\nagent.post('/api/returnOrder').send(reqBody).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();\n});",
              "err": {},
              "uuid": "5855efdc-d27e-486e-a607-196ae94a31e6",
              "parentUUID": "9123ff64-888b-46df-a7c0-b3ef08f4f9d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside sku",
              "fullTitle": "Testing UC6 Put inside sku",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.put(`/api/skuitems/${rfid}`).send({\n    newRFID : newRFID,\n    newAvailable : newAvailable,\n    newDateOfStock : newDateOfStock\n}).then( res => {\n    res.should.have.status(expectedHTTPStatus);\n    done();            \n});",
              "err": {},
              "uuid": "33d3fae7-e22f-4e0c-bed7-1459ba83d88e",
              "parentUUID": "9123ff64-888b-46df-a7c0-b3ef08f4f9d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting sku availability",
              "fullTitle": "Testing UC6 Getting sku availability",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/skuitems/${rfid}`).then(res => {\n    res.should.have.status(expectedHTTPStatus);\n    expect(res.body).to.deep.equalInAnyOrder(expectedAvailable);\n    done();\n});",
              "err": {},
              "uuid": "80a47614-a269-4ffc-9efa-66c9fd063de4",
              "parentUUID": "9123ff64-888b-46df-a7c0-b3ef08f4f9d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8af50ea-d2bb-4969-a7f9-fe5605a92567",
            "5855efdc-d27e-486e-a607-196ae94a31e6",
            "33d3fae7-e22f-4e0c-bed7-1459ba83d88e",
            "80a47614-a269-4ffc-9efa-66c9fd063de4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "144cc8ef-7e96-46d3-922d-0c254c58258a",
          "title": "Test TestDescriptor APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test TestDescriptor APIs\"",
              "fullTitle": "Test TestDescriptor APIs \"before all\" hook in \"Test TestDescriptor APIs\"",
              "timedOut": false,
              "duration": 146,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "8bcb52ce-936e-4e5d-8cd2-6e6f60005a9d",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "3cf72e93-213b-444e-a98a-f29581056ba8",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "425aa9db-f4b5-4ede-b707-72d6dc1a23ae",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Test TestDescriptor APIs Adding a new test descriptor",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "e4259559-99cb-4592-bbe2-eaff1618c8c2",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptors",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptors",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get('/api/testDescriptors').then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tdone();\n});",
              "err": {},
              "uuid": "4fe8f4cd-1cbe-4374-8708-6be3c2c82395",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "ca2e6f4b-a1ba-4787-bd7d-ac42b50de3d5",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "29ce2e48-003d-440f-b888-3f1d0285829f",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting test descriptor",
              "fullTitle": "Test TestDescriptor APIs Getting test descriptor",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.get(`/api/testDescriptors/${testDesID}`).then((res) => {\n\tres.should.has.status(expectedHTTPStatus);\n\texpect(res.body).to.not.deep.equalInAnyOrder(expected);\n\tdone();\n});",
              "err": {},
              "uuid": "3ebaec47-1d64-4e27-825b-b9706ad0eda9",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "e847f5c9-abf6-411f-b09c-201fb61cf7b3",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "7dd64281-1a7c-4c36-b050-160423e56381",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "ea0b0196-e458-41a2-8fb9-64e0be3a4a16",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Test TestDescriptor APIs Put inside test descriptor",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "fba82936-bc12-4e30-ae5d-aa9e65f5cc6f",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete test descriptor",
              "fullTitle": "Test TestDescriptor APIs Delete test descriptor",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/testDescriptor/${testDescID}`).then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tagent.get(`/api/testDescriptor/${testDescID}`).then((res2) => {\n\t\texpect(res2.body).to.deep.equalInAnyOrder({});\n\t\tdone();\n\t});\n});",
              "err": {},
              "uuid": "412a2987-d962-4dbe-8023-25b07531a126",
              "parentUUID": "144cc8ef-7e96-46d3-922d-0c254c58258a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3cf72e93-213b-444e-a98a-f29581056ba8",
            "425aa9db-f4b5-4ede-b707-72d6dc1a23ae",
            "e4259559-99cb-4592-bbe2-eaff1618c8c2",
            "4fe8f4cd-1cbe-4374-8708-6be3c2c82395",
            "ca2e6f4b-a1ba-4787-bd7d-ac42b50de3d5",
            "29ce2e48-003d-440f-b888-3f1d0285829f",
            "3ebaec47-1d64-4e27-825b-b9706ad0eda9",
            "e847f5c9-abf6-411f-b09c-201fb61cf7b3",
            "7dd64281-1a7c-4c36-b050-160423e56381",
            "ea0b0196-e458-41a2-8fb9-64e0be3a4a16",
            "fba82936-bc12-4e30-ae5d-aa9e65f5cc6f",
            "412a2987-d962-4dbe-8023-25b07531a126"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 67,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bcb461bc-d574-4cdc-b66a-145655c1d107",
          "title": "Testing UC 12.1",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.1\"",
              "fullTitle": "Testing UC 12.1 \"before all\" hook in \"Testing UC 12.1\"",
              "timedOut": false,
              "duration": 144,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "86b7fd8e-880e-4a8a-b24d-15aa8946cc8e",
              "parentUUID": "bcb461bc-d574-4cdc-b66a-145655c1d107",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.1 Adding a new test descriptor",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "b5f82aa0-2f3b-4b4d-ae31-e6707499c000",
              "parentUUID": "bcb461bc-d574-4cdc-b66a-145655c1d107",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5f82aa0-2f3b-4b4d-ae31-e6707499c000"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d940aee7-3eff-4995-b49f-582f2a0ef299",
          "title": "Testing UC 12.2",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.2\"",
              "fullTitle": "Testing UC 12.2 \"before all\" hook in \"Testing UC 12.2\"",
              "timedOut": false,
              "duration": 150,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "0545abe8-ac3b-42d9-af96-de1085c9139c",
              "parentUUID": "d940aee7-3eff-4995-b49f-582f2a0ef299",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.2 Adding a new test descriptor",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "ca2b4b10-b9c6-477a-bcdd-8f5f968901b8",
              "parentUUID": "d940aee7-3eff-4995-b49f-582f2a0ef299",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put inside test descriptor",
              "fullTitle": "Testing UC 12.2 Put inside test descriptor",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.put(`/api/testDescriptor/${testDescID}`)\n\t.send({\n\t\tnewName: newName,\n\t\tnewProcedureDescription: newProcedureDescription,\n\t\tnewIdSKU: newIdSKU,\n\t})\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "1a407fae-85a2-4186-899e-c6cdd272f07c",
              "parentUUID": "d940aee7-3eff-4995-b49f-582f2a0ef299",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca2b4b10-b9c6-477a-bcdd-8f5f968901b8",
            "1a407fae-85a2-4186-899e-c6cdd272f07c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c35cd60b-d8ac-44a2-9c7c-ef23fea3957b",
          "title": "Testing UC 12.3",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testDescriptorRoute.js",
          "file": "/test/testDescriptorRoute.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testing UC 12.3\"",
              "fullTitle": "Testing UC 12.3 \"before all\" hook in \"Testing UC 12.3\"",
              "timedOut": false,
              "duration": 142,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localDAO = await resetDB('./EZWarehouseDB.db');\nawait localDAO.insertSKU(\n\tnew SKU('a new sku', 100, 50, 10.99, 'first SKU', null, null, 50)\n);",
              "err": {},
              "uuid": "6a4d30c1-f73c-4c04-9218-152f70ef07e7",
              "parentUUID": "c35cd60b-d8ac-44a2-9c7c-ef23fea3957b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new test descriptor",
              "fullTitle": "Testing UC 12.3 Adding a new test descriptor",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDescriptor = {\n\tname: name,\n\tprocedureDescription: procedureDescription,\n\tidSKU: idSKU,\n};\nagent\n\t.post('/api/testDescriptor')\n\t.send(testDescriptor)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "028ebbc1-d71f-40eb-b7b1-7ddd739210ae",
              "parentUUID": "c35cd60b-d8ac-44a2-9c7c-ef23fea3957b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete test descriptor",
              "fullTitle": "Testing UC 12.3 Delete test descriptor",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent.delete(`/api/testDescriptor/${testDescID}`).then((res) => {\n\tres.should.have.status(expectedHTTPStatus);\n\tagent.get(`/api/testDescriptor/${testDescID}`).then((res2) => {\n\t\texpect(res2.body).to.deep.equalInAnyOrder({});\n\t\tdone();\n\t});\n});",
              "err": {},
              "uuid": "27174798-c59d-46c0-91d8-8325f01c3f8f",
              "parentUUID": "c35cd60b-d8ac-44a2-9c7c-ef23fea3957b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "028ebbc1-d71f-40eb-b7b1-7ddd739210ae",
            "27174798-c59d-46c0-91d8-8325f01c3f8f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ba359cad-56e8-4f88-bf23-0d1c5a5b855e",
          "title": "Test test Result APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testResultRoute.js",
          "file": "/test/testResultRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test test Result APIs\"",
              "fullTitle": "Test test Result APIs \"before each\" hook in \"Test test Result APIs\"",
              "timedOut": false,
              "duration": 148,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(\n\tnew SKU('SKU1', 10, 10, 100, 'no notes', null, null, 20)\n);\nawait dao.addSKUItem(\n\tnew SKUItem(1, true, '24-05-2022', '12345678901234567890123456789012')\n);",
              "err": {},
              "uuid": "98e32020-c8b1-4d2b-9684-8c1cf6a7dca8",
              "parentUUID": "ba359cad-56e8-4f88-bf23-0d1c5a5b855e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "fb104b18-5648-4815-bac6-0149b0255070",
              "parentUUID": "ba359cad-56e8-4f88-bf23-0d1c5a5b855e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "2c61a2c0-74a8-428e-9f9d-c3fdf18519c8",
              "parentUUID": "ba359cad-56e8-4f88-bf23-0d1c5a5b855e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb104b18-5648-4815-bac6-0149b0255070",
            "2c61a2c0-74a8-428e-9f9d-c3fdf18519c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
          "title": "Test test Result APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/testResultRoute.js",
          "file": "/test/testResultRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test test Result APIs\"",
              "fullTitle": "Test test Result APIs \"before each\" hook in \"Test test Result APIs\"",
              "timedOut": false,
              "duration": 173,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.insertSKU(\n\tnew SKU('SKU1', 10, 10, 100, 'no notes', null, null, 20)\n);\nawait dao.addSKUItem(\n\tnew SKUItem(1, true, '24-05-2022', '12345678901234567890123456789012')\n);\nawait dao.addTestDescriptor('TD1', 'Test description 1', 1);\nawait dao.addTestDescriptor('TD2', 'Test description 2', 1);\nawait dao.addTestResult(\n\t'12345678901234567890123456789012',\n\t1,\n\t'24-05-2022',\n\ttrue\n);\nawait dao.addTestResult(\n\t'12345678901234567890123456789012',\n\t2,\n\t'22-05-2022',\n\tfalse\n);",
              "err": {},
              "uuid": "ba15aa70-63bd-439c-8798-447591d4780d",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "fullTitle": "Test test Result APIs getTestResultsByRFID : GET /api/skuitems/:rfid/testResults",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "505d0802-08aa-4303-afb8-8f50aab59425",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "22e13dcf-bdbc-4772-8c25-f111374a6e00",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "d3aa6403-bf40-4ec1-9e04-8eab89e835ef",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "fullTitle": "Test test Result APIs getTestResultByRFIDAndID : GET /api/skuitems/:rfid/testResults/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get(`/api/skuitems/${rfid}/testResults/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "6aa529c1-964b-4000-99e8-c0dc4d78a432",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "f6bb0e19-b9dc-4b76-9494-0974aaca59f5",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "0093f722-787c-4c37-97f8-a99810247c12",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add test result : POST /api/skuitems/testResult",
              "fullTitle": "Test test Result APIs add test result : POST /api/skuitems/testResult",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\trfid: rfid,\n\tidTestDescriptor: idTestDescriptor,\n\tDate: date,\n\tResult: result,\n};\nagent\n\t.post('/api/skuitems/testResult')\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "85b2634e-ce7d-42e6-86d9-7f808ab0fae4",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "0ecb1d19-2336-4023-a219-f782698f2fd8",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "4cd70add-8b7f-4256-b080-f2c656c21042",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "d207db02-8d11-4c43-81ec-c9c0ee5dfc8c",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs edit test result : PUT /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\tnewIdTestDescriptor: newIdTestDescriptor,\n\tnewDate: newDate,\n\tnewResult: newResult,\n};\nagent\n\t.put(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "a2f6367f-edf8-4aa4-856a-883eeb852fda",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete test result : DELETE /api/skuitems/:rfid/testResult/:id",
              "fullTitle": "Test test Result APIs delete test result : DELETE /api/skuitems/:rfid/testResult/:id",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/skuitems/${rfid}/testResult/${id}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => console.log(err));",
              "err": {},
              "uuid": "5a7a7a4e-9be9-42a3-acd0-0729c5cfb576",
              "parentUUID": "dbb6fb01-10e6-4332-af4f-8cd9200eaa65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "505d0802-08aa-4303-afb8-8f50aab59425",
            "22e13dcf-bdbc-4772-8c25-f111374a6e00",
            "d3aa6403-bf40-4ec1-9e04-8eab89e835ef",
            "6aa529c1-964b-4000-99e8-c0dc4d78a432",
            "f6bb0e19-b9dc-4b76-9494-0974aaca59f5",
            "0093f722-787c-4c37-97f8-a99810247c12",
            "85b2634e-ce7d-42e6-86d9-7f808ab0fae4",
            "0ecb1d19-2336-4023-a219-f782698f2fd8",
            "4cd70add-8b7f-4256-b080-f2c656c21042",
            "d207db02-8d11-4c43-81ec-c9c0ee5dfc8c",
            "a2f6367f-edf8-4aa4-856a-883eeb852fda",
            "5a7a7a4e-9be9-42a3-acd0-0729c5cfb576"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
          "title": "Test user APIs",
          "fullFile": "/mnt/61AE5664547168E3/Users/simon/Desktop/SIMONE/PoliTO/4° anno/Software engineering/EzWh/code/server/test/userRoute.js",
          "file": "/test/userRoute.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test user APIs\"",
              "fullTitle": "Test user APIs \"before each\" hook in \"Test user APIs\"",
              "timedOut": false,
              "duration": 151,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dao = await resetDB('./EZWarehouseDB.db');\nawait dao.addUser(\n\tnew User('Ahmed', 'Khater', 'supplier', 's123456@mail.com', '12345678')\n);\nawait dao.addUser(\n\tnew User('Mohamed', 'Khater', 'customer', '127812@mail.com', '12345678')\n);\nawait dao.addUser(\n\tnew User('Eslam', 'Khater', 'manager', '987654321@mail.com', '12345678')\n);",
              "err": {},
              "uuid": "daf1eafe-9fa4-4907-bc93-6bebc81654cd",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "d9efceb9-5602-416d-bc4c-50907c73ac98",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "f88fce5b-a504-433c-beea-96dbe7fac8b9",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding a new user : POST /api/newUser",
              "fullTitle": "Test user APIs Adding a new user : POST /api/newUser",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n\tusername: username,\n\tname: name,\n\tsurname: surname,\n\tpassword: password,\n\ttype: type,\n};\nagent\n\t.post('/api/newUser')\n\t.send(user)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "08c8bda7-74f7-4195-8141-97bd82072e43",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get users : GET /api/users",
              "fullTitle": "Test user APIs get users : GET /api/users",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/users')\n\t.then(function (res) {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "c5a00212-ad4b-4bf6-9faf-0f5f75371ac4",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting suppliers : GET /api/suppliers",
              "fullTitle": "Test user APIs Getting suppliers : GET /api/suppliers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.get('/api/suppliers')\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\texpect(res.body).to.deep.equalInAnyOrder(expected);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "b30eec1c-899b-4921-a58a-8a98a5d8ccd9",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "02b766ad-0142-4b62-8f8e-8cb4e8a85c7b",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "f59232ba-9aab-469b-9c79-2bb2a1acafea",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit user : PUT /api/users/:username",
              "fullTitle": "Test user APIs edit user : PUT /api/users/:username",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let reqBody = {\n\toldType: oldType,\n\tnewType: newType,\n};\nagent\n\t.put(`/api/users/${username}`)\n\t.send(reqBody)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "054afbee-9fcd-4ae2-bdc7-3a104b723607",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "3c1d860c-03f5-442d-b3c3-c5659bbc8bad",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "9e3b7ead-f509-444d-9720-bceb8cccff8c",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "93529508-5328-4011-bfc4-b6903719507f",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user : DELETE /api/users/:username/:type",
              "fullTitle": "Test user APIs delete user : DELETE /api/users/:username/:type",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agent\n\t.delete(`/api/users/${username}/${type}`)\n\t.then((res) => {\n\t\tres.should.have.status(expectedHTTPStatus);\n\t\tdone();\n\t})\n\t.catch((err) => done(err));",
              "err": {},
              "uuid": "83a6dfc9-a42f-42b4-8424-0272de387c13",
              "parentUUID": "d2501eb4-0343-4121-81db-b2fa84dbefbc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9efceb9-5602-416d-bc4c-50907c73ac98",
            "f88fce5b-a504-433c-beea-96dbe7fac8b9",
            "08c8bda7-74f7-4195-8141-97bd82072e43",
            "c5a00212-ad4b-4bf6-9faf-0f5f75371ac4",
            "b30eec1c-899b-4921-a58a-8a98a5d8ccd9",
            "02b766ad-0142-4b62-8f8e-8cb4e8a85c7b",
            "f59232ba-9aab-469b-9c79-2bb2a1acafea",
            "054afbee-9fcd-4ae2-bdc7-3a104b723607",
            "3c1d860c-03f5-442d-b3c3-c5659bbc8bad",
            "9e3b7ead-f509-444d-9720-bceb8cccff8c",
            "93529508-5328-4011-bfc4-b6903719507f",
            "83a6dfc9-a42f-42b4-8424-0272de387c13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}